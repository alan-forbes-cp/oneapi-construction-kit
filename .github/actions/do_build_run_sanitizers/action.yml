name: build run sanitizers
description: build run sanitizers

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    #
    # tsan first
    #
    - name: Checkout llvm/llvm-project
      uses: actions/checkout@v4
      with:
        repository: llvm/llvm-project
        #ref: ${{inputs.llvm_branch}}
        ref: 'release/19.x'  # ALAN TODO: pass in param for this
        #path: llvm-project
        path: external/llvm-project   # ALAN TODO: external dir already exists - rename?
    - name: Install Ninja
      uses: llvm/actions/install-ninja@a1ea791b03c8e61f53a0e66f2f73db283aa0f01e # main branch
    - name: Run cmake on llvm
      if: false
      shell: 'bash'
      run: |
        sudo apt update
        sudo apt -y upgrade
        sudo apt install -y clang-19
        ls -l
        ls -l external/llvm-project
        cd external
        cmake llvm-project/llvm \
            -GNinja \
            -Bbuild \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/llvm_install \
            -DCA_LLVM_PROJECT_DIR=$GITHUB_WORKSPACE/external/llvm-project \
            -DCA_LLVM_SPIRV_PROJECT_DIR=$GITHUB_WORKSPACE/external/llvm-spirv \
            -DLLVM_ENABLE_ZLIB=FALSE \
            -DLLVM_ENABLE_Z3_SOLVER=FALSE \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DLLVM_USE_SANITIZER=Thread \
            -DLLVM_BUILD_LLVM_DYLIB=ON \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_ENABLE_DIA_SDK=OFF \
            -DLLVM_ENABLE_ZSTD=FALSE \
            -DLLVM_ENABLE_PROJECTS="clang;lld" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/usr/bin/clang-19 \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-19
        cmake --build $GITHUB_WORKSPACE/external/build --target install -- -j2
        ls -l
        ls -l llvm_install || echo NO INSTALL
        ls -l llvm-project || echo NO PROJECT
        ls -l llvm-spirv || echo NO SPIRV

    - name: download llvm
      uses: ./.github/actions/download_artifact
      with:
        name: llvm-ubuntu-22.04-x86_64-19-RelAssert
        run_id: ${{ github.run_id }}
        token: ${{ secrets.GITHUB_TOKEN }}
        path: $GITHUB_WORKSPACE/external/llvm_install
        needs_tar: 'true'

    - name: list llvm
      shell: 'bash'
      run: |
        ls -l $GITHUB_WORKSPACE/external/llvm_install

    - name: Build OCK
      shell: 'bash'
      run: |
        # ALAN TODO: Review CA_BUILTINS_TOOLS_DIR
        cmake \
            -GNinja \
            -DCA_ENABLE_HOST_IMAGE_SUPPORT=OFF \
            -DOCL_EXTENSION_cl_khr_command_buffer=ON \
            -DOCL_EXTENSION_cl_khr_command_buffer_mutable_dispatch=ON \
            -DCA_ENABLE_EXTENDED_CHECKS=OFF \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install \
            -DCA_LLVM_INSTALL_DIR=$GITHUB_WORKSPACE/external/llvm_install \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCA_USE_SANITIZER=Thread \
            -DCMAKE_C_COMPILER=/usr/bin/clang-19 \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-19 \
            -DCA_ENABLE_DEBUG_SUPPORT=ON \
            -DCA_BUILTINS_TOOLS_DIR=$GITHUB_WORKSPACE/external/llvm_install\bin \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCA_GTEST_LAUNCHER=/usr/bin/python3;-u;$GITHUB_WORKSPACE/scripts/gtest-terse-runner.py \
            .
            # cmake 
            # -GNinja 
            # -DCA_ENABLE_HOST_IMAGE_SUPPORT=OFF 
            # -DOCL_EXTENSION_cl_khr_command_buffer=ON 
            # -DOCL_EXTENSION_cl_khr_command_buffer_mutable_dispatch=ON 
            # -DCA_ENABLE_EXTENDED_CHECKS=OFF 
            # -DCMAKE_INSTALL_PREFIX=/builds/ComputeAorta/ci-github/oneapi-construction-kit/build/install 
            # -DCA_LLVM_INSTALL_DIR=/builds/ComputeAorta/ci-github/oneapi-construction-kit/external/llvm/build/install 
            # -DCMAKE_BUILD_TYPE=Debug 
            # -DCA_USE_SANITIZER=Thread 
            # -DCMAKE_C_COMPILER=clang-19 
            # -DCMAKE_CXX_COMPILER=clang++-19 
            # -DCA_ENABLE_DEBUG_SUPPORT=ON 
            # -DCA_BUILTINS_TOOLS_DIR=/builds/ComputeAorta/ci-github/oneapi-construction-kit/build/llvm/llvm_tools/bin 
            # -DCMAKE_C_COMPILER_LAUNCHER=ccache 
            # -DCMAKE_CXX_COMPILER_LAUNCHER=ccache 
            # -DCA_GTEST_LAUNCHER=/usr/bin/python;-u;/builds/ComputeAorta/ci-github/oneapi-construction-kit/scripts/gtest-terse-runner.py 
            # /builds/ComputeAorta/ci-github/oneapi-construction-kit
        ls -l
        ls -l install || echo NO INSTALL
        ls -l build || echo NO BUILD
        cmake --build $GITHUB_WORKSPACE/build --target all --config SanitizeThread

    - name: Test OCK
      shell: 'bash'
      run: |
        ls -l
        ls -l build || echo NO BUILD
        # ALAN TODO: Guesstimate -j4 - was -j8 on Gitlab
        ninja -C build -j4 check-ock
