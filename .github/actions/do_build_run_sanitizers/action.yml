name: build run sanitizers
description: build run sanitizers

inputs:
  san_type:
    description: 'sanitizer type: tsan OR aubsan'
    type: string
    required: true
  build_type:
    description: 'build type: offline OR online'
    type: string
    required: true
  llvm_branch:
    description: 'The actual llvm branch to check out e.g. release/19.x'
    type: string
    required: true

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:

    - name: Set sanitizer vars
      id: sanitizer_vars
      shell: 'bash'
      run: |
        if [ "${{ inputs.san_type }}" = "tsan" ]; then
           echo "build_type=SanitizeThread" >> "$GITHUB_OUTPUT"
           echo "ninja_options=-j3" >> "$GITHUB_OUTPUT"
           echo "ca_options=-DCA_ENABLE_EXTENDED_CHECKS=OFF" >> "$GITHUB_OUTPUT"
        else # aubsan
           echo "build_type=SanitizeAddress,Undefined" >> "$GITHUB_OUTPUT"
           echo "ninja_options=-j8" >> "$GITHUB_OUTPUT"
           echo "ca_options=" >> "$GITHUB_OUTPUT"
        fi
        cat $GITHUB_OUTPUT

    - name: Get sanitizer vars
      shell: 'bash'
      run: |
        echo BUILD_TYPE ${{ steps.sanitizer_vars.outputs.build_type }} 
        echo NINJA_OPTIONS ${{ steps.sanitizer_vars.outputs.ninja_options }} 
        echo CA_OPTIONS ${{ steps.sanitizer_vars.outputs.ca_options }} 

    - name: Temp default
      if: startsWith(inputs.build_type, 'offline')
      shell: 'bash'
      run: |
        echo san_type = [${{ inputs.san_type }}]
        echo build_type = [${{ inputs.build_type }}]

    - name: Install Ninja
      if: startsWith(inputs.build_type, 'online')
      uses: llvm/actions/install-ninja@a1ea791b03c8e61f53a0e66f2f73db283aa0f01e # main branch

    - name: Install clang
      if: startsWith(inputs.build_type, 'online')
      shell: 'bash'
      run: |
        sudo apt update
        sudo apt -y upgrade
        sudo apt install -y clang-19

    - name: Checkout llvm/llvm-project
      if: startsWith(inputs.build_type, 'online')
      uses: actions/checkout@v4
      with:
        repository: llvm/llvm-project
        ref: ${{ inputs.llvm_branch }}
        path: external/llvm-project   # ALAN TODO: external dir already exists - rename?

    - name: Build llvm
      if: startsWith(inputs.build_type, 'online')
      shell: 'bash'
      run: |
        ls -l
        ls -l external/llvm-project
        cd external
        # ALAN TODO: Use do_build_llvm ??
        # ALAN TODO: Could/Should this artefact be pre-built separately and shared between san builds ??
        cmake llvm-project/llvm \
            -GNinja \
            -Bbuild \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/llvm_install \
            -DCA_LLVM_PROJECT_DIR=$GITHUB_WORKSPACE/external/llvm-project \
            -DCA_LLVM_SPIRV_PROJECT_DIR=$GITHUB_WORKSPACE/external/llvm-spirv \
            -DLLVM_ENABLE_ZLIB=FALSE \
            -DLLVM_ENABLE_Z3_SOLVER=FALSE \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DLLVM_USE_SANITIZER=Thread \
            -DLLVM_BUILD_LLVM_DYLIB=ON \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_ENABLE_DIA_SDK=OFF \
            -DLLVM_ENABLE_ZSTD=FALSE \
            -DLLVM_ENABLE_PROJECTS="clang;lld" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/usr/bin/clang-19 \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-19
        cmake --build $GITHUB_WORKSPACE/external/build --target install -- -j2
        ls -l
        ls -l llvm_install || echo NO INSTALL
        ls -l llvm-project || echo NO PROJECT
        ls -l llvm-spirv || echo NO SPIRV

    - name: Download llvm DELETE
      if: false
      uses: ./.github/actions/download_artifact
      with:
        name: llvm-ubuntu-22.04-x86_64-19-RelAssert
        run_id: ${{ github.run_id }}
        token: ${{ env.GH_TOKEN }}
        path: $GITHUB_WORKSPACE/external/llvm_install
        needs_tar: 'true'

    - name: List llvm DELETE
      if: false
      shell: 'bash'
      run: |
        ls -lR $GITHUB_WORKSPACE/external/llvm_install

    - name: Build OCK
      if: startsWith(inputs.build_type, 'online')
      shell: 'bash'
      run: |
        # ALAN TODO: Review CA_BUILTINS_TOOLS_DIR
        # ALAN TODO: Use do_build_ock
        cmake \
            -Bbuild \
            -GNinja \
            -DCA_ENABLE_HOST_IMAGE_SUPPORT=OFF \
            -DOCL_EXTENSION_cl_khr_command_buffer=ON \
            -DOCL_EXTENSION_cl_khr_command_buffer_mutable_dispatch=ON \
            ${{ steps.sanitizer_vars.outputs.ca_options }} \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install \
            -DCA_LLVM_INSTALL_DIR=$GITHUB_WORKSPACE/external/llvm_install \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCA_USE_SANITIZER=Thread \
            -DCMAKE_C_COMPILER=/usr/bin/clang-19 \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-19 \
            -DCA_ENABLE_DEBUG_SUPPORT=ON \
            -DCA_BUILTINS_TOOLS_DIR=$GITHUB_WORKSPACE/external/llvm_install/bin \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCA_GTEST_LAUNCHER="/usr/bin/python3;-u;$GITHUB_WORKSPACE/scripts/gtest-terse-runner.py" \
            .
        ls -l
        ls -l install || echo NO INSTALL
        ls -l build || echo NO BUILD
        cmake --build $GITHUB_WORKSPACE/build --target all --config ${{ steps.sanitizer_vars.outputs.build_type }}

    - name: Test OCK
      if: startsWith(inputs.build_type, 'online')
      shell: 'bash'
      run: |
        ls -l
        ls -l build || echo NO BUILD
        ninja -C build ${{ steps.sanitizer_vars.outputs.ninja_options }} check-ock
