name: build run sanitizers
description: build run sanitizers

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    #
    # tsan
    #
    - name: List default
      shell: 'bash'
      run: |
        echo PATH IS $PATH
        echo UNAME IS && uname -a
        #echo SYSCTL IS && sysctl vm.mmap_rnd_bits
        #sudo sysctl vm.mmap_rnd_bits=28
        #echo SYSCTL IS && sysctl vm.mmap_rnd_bits
        #echo RANDOM IS && cat /proc/sys/kernel/randomize_va_space
        #echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
        #sudo setarch `uname -m` -R
        #echo RANDOM IS && cat /proc/sys/kernel/randomize_va_space
        ls -l
    - name: Checkout repo llvm
      uses: actions/checkout@v4
      with:
        repository: llvm/llvm-project
        #ref: ${{inputs.llvm_branch}}
        ref: 'release/19.x'  # ALAN TODO: pass in param for this
        #path: llvm-project
        path: external/llvm-project
    - name: Install Ninja
      uses: llvm/actions/install-ninja@a1ea791b03c8e61f53a0e66f2f73db283aa0f01e # main branch
    - name: Run cmake
      shell: 'bash'
      run: |
        set -x
        sudo apt update
        sudo apt -y upgrade
        sudo apt install -y clang-19 lld-19
        set +x
        ls -l
        ls -l external/llvm-project
        cd external
        cmake llvm-project/llvm \
            -GNinja \
            -Bbuild \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/llvm_install \
            -DCA_LLVM_PROJECT_DIR=$GITHUB_WORKSPACE/external/llvm-project \
            -DCA_LLVM_SPIRV_PROJECT_DIR=$GITHUB_WORKSPACE/external/llvm-spirv \
            -DLLVM_ENABLE_ZLIB=FALSE \
            -DLLVM_ENABLE_Z3_SOLVER=FALSE \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DLLVM_USE_SANITIZER=Thread \
            -DCMAKE_C_COMPILER=/usr/bin/clang-19 \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-19
        #   -DCMAKE_C_COMPILER=/usr/bin/cc \
        #   -DCMAKE_CXX_COMPILER=/usr/bin/c++
        #cmake llvm-project/llvm
        #    -DLLVM_ENABLE_DIA_SDK=OFF
        #    -DCMAKE_INSTALL_PREFIX=llvm_install
        #    -DLLVM_ENABLE_ZLIB=FALSE
        #    -DLLVM_ENABLE_ZSTD=FALSE
        #    -DLLVM_ENABLE_Z3_SOLVER=FALSE
        #    -DLLVM_ENABLE_PROJECTS="clang;lld"
        #    -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64;RISCV"
        #    -Bbuild
        #    -GNinja
        #    -DCMAKE_BUILD_TYPE=Release
        #    ${{ inputs.build_type == 'RelAssert' && '-DLLVM_ENABLE_ASSERTIONS=ON' || '' }}
        #    ${{ !startsWith(runner.os, 'Windows') && '-DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON' || '' }}
        #    $ARCH_FLAGS
    - name: Run build on llvm
      shell: 'bash'
      run: |
        ls -l
        ls -l external
        ls -l external/llvm-project
        cd external
        #cmake --build $GITHUB_WORKSPACE/external/build --target install -- -j2
        cmake --build $GITHUB_WORKSPACE/external/build --target install -- -j4
        #cmake --build build --target install
    # build/run OCK
