name: build dpc++
description: build dpc++

inputs:
  target:
    description: 'target architecture'
  download_dpcpp_artefact:
    description: 'download ock artefact rather than building, of form <target>=id;<target2=id2>. Special value of download_release applies to all targets.'
    type: string
    default: "build"

runs:
  using: "composite"
  steps:
    - name: calc vars
      id: calc_vars
      uses: ./.github/actions/calc_vars
      with:
        target: ${{ inputs.target }}  

    - name: download pre-built native dpc++ artifact for cross builds
      if: contains(inputs.target, 'host_aarch64') || contains(inputs.target, 'host_riscv')
      uses: actions/download-artifact@v4
      with:
        name: 'dpcpp_host_x86_64_linux'
        path: dpcpp_native_x86_64_install

    - name: unpackage native dpc++ artifacts for cross builds # package/unpackage avoids known 'permissions loss' issue
      if: contains(inputs.target, 'host_aarch64') || contains(inputs.target, 'host_riscv')
      shell: bash
      run: |
        cd dpcpp_native_x86_64_install
        tar xf dpcpp.tar
        rm dpcpp.tar

    - name: Install Ninja
      uses: llvm/actions/install-ninja@main

    - name: clone dpc++
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      uses: actions/checkout@v4
      with:
        repository: intel/llvm
        path: llvm

    - name: dpcpp configure
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run: |
        CROSS_OPTS=""
        if [[ "${{inputs.target}}" =~ .*aarch64.* || "${{inputs.target}}" =~ .*riscv64.* ]] ; then
          CROSS_OPTS="--cmake-opt=-DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/toolchains/${{steps.calc_vars.outputs.arch}}-linux.cmake --cmake-opt=-DLLVM_HOST_TRIPLE=${{steps.calc_vars.outputs.arch}}-unknown-linux-gnu --cmake-opt=-DLLVM_NATIVE_TOOL_DIR=$GITHUB_WORKSPACE/dpcpp_native_x86_64_install/bin"
        fi
        cd llvm
        set -x
        python3 buildbot/configure.py -o build --host-target="X86;AArch64;RISCV" --native_cpu \
                --llvm-external-projects=lld --cmake-opt=-DNATIVECPU_USE_OCK=ON \
                $CROSS_OPTS \
                --cmake-opt=-DLLVM_ENABLE_ZLIB=OFF --cmake-opt=-DLLVM_ENABLE_ZSTD=OFF

    - name: build sycl-headers
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run:
        cmake --build llvm/build -- sycl-headers
  
    - name: build dpc plus plus
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run:
       python3 llvm/buildbot/compile.py -o llvm/build -v -j 8

    - name: build extra utilties
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      # Build various utilities, since those aren't proper dependencies.
      # FileCheck and not are needed for tests. The rest are needed for
      # cross builds. They are enabled on all targets for consistency.
      shell: bash
      run:
       cmake --build llvm/build -- FileCheck clang-tblgen
        libclc-remangler llvm-as llvm-min-tblgen llvm-tblgen not
        opt prepare_builtins -j8

    - name: copy utilities
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run:
        cd llvm/build/bin;
        cp FileCheck clang-tblgen libclc-remangler llvm-as llvm-min-tblgen
        llvm-tblgen not opt prepare_builtins ../install/bin

    # Note: install config (.cfg) files indicate the expected install location of the x-comp 'lib' artifact
    - name: install config files to pick up libraries for cross compilation.
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run: |
        echo Installing configuration files
        cd llvm/build/bin
        # Install configuration files to pick up libraries for cross compilation.
        for arch in x86_64 aarch64 riscv64; do
          echo "
          -L<CFGDIR>/../../../dpcpp_${arch}_install/lib
          -fsycl-libdevice-path=<CFGDIR>/../../../dpcpp_${arch}_install/lib
          -fsycl-libspirv-path=<CFGDIR>/../../../dpcpp_${arch}_install/lib/clc/remangled-l64-signed_char.libspirv-${arch}-unknown-linux-gnu.bc
          " >../install/bin/${arch}-unknown-linux-gnu.cfg;
        done

    - name: download dpc plus plus from official releases
      # TODO: This is a bit imperfect as it should parse it properly
      if: contains(inputs.download_dpcpp_artefact, inputs.target) && contains(inputs.download_dpcpp_artefact, 'download_release')
      shell: bash
      run: |
        mkdir -p llvm/build/install
        cd llvm/build/install
        # Get latest build - go back 2 weeks max else fail
        for COUNTER in {0..13}; do
            DATESTAMP=$(date -d "-$COUNTER day" '+%Y-%m-%d')
            wget -q https://github.com/intel/llvm/releases/download/nightly-$DATESTAMP/sycl_linux.tar.gz && echo Using DPC++ release build: $DATESTAMP && break
        done
        tar xf sycl_linux.tar.gz
        rm sycl_linux.tar.gz

    - name: download previous dpcpp if needed ${{ inputs.target }} ${{ matrix.download_dpcpp_artefact}}
      shell: bash      
      if: contains(inputs.download_dpcpp_artefact, inputs.target) && contains(inputs.download_dpcpp_artefact, 'download_release') != true
      run: |
        download_id=`echo "${{inputs.download_dpcpp_artefact}}"`
        echo "echo $download_id | sed 's/.*${{inputs.target}}=//' | sed 's/;.*//'"
        download_id=`echo $download_id | sed 's/.*${{inputs.target}}=//' | sed 's/;.*//'`
        echo download id is "'$download_id'"
        # TODO : make this work on windows
        mkdir -p llvm/build/install
        git config --global --add safe.directory $PWD        
        gh run download $download_id -n dpcpp_${{ inputs.target }} -D llvm/build/install
        ls llvm/build/install


    - name: package artefacts  # package/unpackage avoids known 'permissions loss' issue
      shell: bash
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      run: |
        cd llvm/build/install
        pwd && ls -alR
        tar cf dpcpp.tar *

    - name: upload dpcpp artifact
      uses: actions/upload-artifact@v4
      with:
        name: dpcpp_${{inputs.target}}
        path: llvm/build/install/dpcpp.tar
        retention-days: 1
