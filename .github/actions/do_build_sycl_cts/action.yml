name: build sycl cts
description: build sycl cts

inputs:
  target:
    description: 'target architecture'
  exclude_subset:
    description: 'exclude defined subset. e.g. "A" (references test set file: tests_subset_A.csv)'
    default: ''
  sycl_device:
    description: '"opencl" or "native_cpu"'
    default: 'opencl'
  download_sycl_cts_artefact:
    description: 'download sycl_cts artefact rather than building, of form <target>=id;<target2=id2>.'
    default: ''    

runs:
  using: "composite"
  steps:
    - name: calc vars
      id: calc_vars
      uses: ./.github/actions/calc_vars
      with:
        target: ${{ inputs.target }}  

    - name: Install Ninja
      if: contains(inputs.download_sycl_cts_artefact, inputs.target) != true
      uses: llvm/actions/install-ninja@main

    - name: download icd artifact
      if: inputs.sycl_device == 'opencl' && contains(inputs.download_sycl_cts_artefact, inputs.target) != true
      uses: actions/download-artifact@v4
      with:
        name: icd_${{inputs.target}}
        path: install_icd

    - name: download headers artifact
      if: inputs.sycl_device == 'opencl' && contains(inputs.download_sycl_cts_artefact, inputs.target) != true
      uses: actions/download-artifact@v4
      with:
        name: header_${{inputs.target}}
        path: install_headers

    - name: download native x86_64 dpc++ artifact (for x86_64 & riscv64 qemu)
      if: contains(inputs.download_sycl_cts_artefact, inputs.target) != true &&
          ( contains(inputs.target, 'host_x86_64') || contains(inputs.target, 'host_riscv') )
      uses: ./.github/actions/download_artifact
      with:
        name: dpcpp_host_x86_64_linux
        path: dpcpp/x86_64-linux/install
        needs_tar: 'true'
        run_id: ${{ github.run_id }}

    - name: download native aarch64 dpc++ artifact
      if: contains(inputs.download_sycl_cts_artefact, inputs.target) != true && contains(inputs.target, 'host_aarch64')
      uses: ./.github/actions/download_artifact
      with:
        name: dpcpp_host_aarch64_linux
        path: dpcpp/aarch64-linux/install
        needs_tar: 'true'
        run_id: ${{ github.run_id }}

    - name: download cross riscv64 dpc++ artifact
      if: contains(inputs.download_sycl_cts_artefact, inputs.target) != true && contains(inputs.target, 'host_riscv')
      uses: ./.github/actions/download_artifact
      with:
        name: dpcpp_host_riscv64_linux
        path: dpcpp/riscv64-linux/install
        needs_tar: 'true'
        run_id: ${{ github.run_id }}

    - name: checkout sycl cts
      if: contains(inputs.download_sycl_cts_artefact, inputs.target) != true
      uses: actions/checkout@v4
      with:
        repository: KhronosGroup/SYCL-CTS
        path: SYCL-CTS.src
        submodules: true

    - name: build SYCL CTS
      if: contains(inputs.download_sycl_cts_artefact, inputs.target) != true    
      shell: bash
      run: |
        echo calling cmake and ninja on SYCL CTS
        # Todo: as we extend into cross etc, we may want to expand on the cxx flags
        # We build SYCL-CTS without installing it, so build directly in the top level.
        git -C SYCL-CTS.src log -1
        for patch in $GITHUB_WORKSPACE/scripts/testing/patches/SYCL-CTS-*.patch
        do
          if test -f "$patch"
          then
            echo "Applying ${patch##*/}"
            git -C SYCL-CTS.src apply "$patch"
          fi
        done
        if [[ "${{inputs.sycl_device}}" = "opencl" ]] ; then
          DEV_OPTS="-DOpenCL_LIBRARY=$GITHUB_WORKSPACE/install_icd/lib/libOpenCL.so -DOpenCL_INCLUDE_DIR=$GITHUB_WORKSPACE/install_headers/include -DDPCPP_FLAGS=--offload-new-driver"
        else # native_cpu
          DEV_OPTS="-DSYCL_CTS_ENABLE_OPENCL_INTEROP_TESTS=OFF -DDPCPP_FLAGS=--offload-new-driver;-fsycl-targets=native_cpu"
        fi
        export JOPT="4"
        export ARCHOPT="x86_64"
        if [[ "${{inputs.target}}" =~ .*aarch64.* ]] ; then
          JOPT="2" # needed for cp-graviton runner
          ARCHOPT="aarch64"
        fi
        EXCLUDE_SUBSET=""
        if [ -n "${{ inputs.exclude_subset }}" ] ; then
          EXCLUDE_SUBSET="-DSYCL_CTS_EXCLUDE_TEST_CATEGORIES=$GITHUB_WORKSPACE/scripts/testing/sycl_cts/tests_subset_${{ inputs.exclude_subset }}.csv
        fi
        set -x
        cmake -S SYCL-CTS.src \
            -GNinja \
            -B SYCL-CTS \
            -DSYCL_IMPLEMENTATION=DPCPP \
            -DDPCPP_INSTALL_DIR=$GITHUB_WORKSPACE/dpcpp/${ARCHOPT}-linux/install \
            -DCMAKE_CXX_COMPILER="$GITHUB_WORKSPACE/dpcpp/${ARCHOPT}-linux/install/bin/clang++" \
            -DCMAKE_CXX_FLAGS="--target=${{steps.calc_vars.outputs.arch}}-linux-gnu" \
            -DCMAKE_CXX_LINK_FLAGS="-fuse-ld=lld" \
            ${DEV_OPTS} \
            ${EXCLUDE_SUBSET}
        ninja -C SYCL-CTS -v -j$JOPT -k 0 || :

    # Following build, artifacts required are in: ./SYCL-CTS/bin
    # If downloading rather than building, add them to that location before upload.

    - name: download sycl cts artefact  # package/unpackage avoids known 'permissions loss' issue
      if: contains(inputs.download_sycl_cts_artefact, inputs.target)
      shell: bash
      run: |
        download_id=`echo "${{inputs.download_sycl_cts_artefact}}"`
        echo "echo $download_id | sed 's/.*${{inputs.target}}=//' | sed 's/;.*//'"
        download_id=`echo $download_id | sed 's/.*${{inputs.target}}=//' | sed 's/;.*//'`
        echo download id is "'$download_id'"
        # TODO : make this work on windows
        mkdir -p SYCL-CTS/bin
        git config --global --add safe.directory $PWD        
        gh run download $download_id -n sycl_cts_${{ inputs.sycl_device }}_${{ inputs.target }}
        # Downloaded tar file for extraction is: sycl_cts_${{inputs.sycl_device}}_${{inputs.target}}.tar
        tar xf sycl_cts_${{inputs.sycl_device}}_${{inputs.target}}.tar -C SYCL-CTS/bin
        ls SYCL-CTS/bin

    - name: upload SYCL-CTS artefacts
      uses: ./.github/actions/upload_artifact
      with:
        name: sycl_cts_${{inputs.sycl_device}}_${{inputs.target}}_x-${{inputs.exclude_subset}}
        path: SYCL-CTS/bin
        needs_tar: 'true'
