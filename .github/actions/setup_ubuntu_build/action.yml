name: setup-ubuntu-build
description: Setup ubuntu ready for building. Includes installs, ninja, build cache setup and loading llvm cache

inputs:
  llvm_build_type:
    description: 'llvm Build type (Release, RelAssert) - note we need to use RelAssert for the cache pattern matching'
    default: RelAssert
  llvm_version:
    description: 'Major llvm version to use for fetching llvm cache e.g. 17'
    default: 17
  ubuntu_version:
    description: 'Version of ubuntu used for cache retrieval and prerequisites'
    default: 22.04
  save:
    description: 'Save the build cache at the end - not for PR testing'
    default: false
  arch:
    description: 'Architecture'
    default: x86_64

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    - name: Install prerequisites
      shell: bash    
      run: |
        pip install lit clang-format==17.0.6 virtualenv
        if [ "${{ inputs.arch }}" = "x86" ]; then sudo dpkg --add-architecture i386 ; fi
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        if [ "${{ inputs.ubuntu_version }}" = "20.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-focal.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-focal.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "22.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-jammy.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-jammy.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "24.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list https://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list; fi
        sudo apt-get update
        sudo apt-get install --yes doxygen
        sudo apt-get install --yes vulkan-sdk
        if [ "${{ inputs.arch }}" = "x86" ]; then sudo apt-get install --yes gcc-multilib g++-multilib libc6-dev:i386 lib32tinfo-dev ; fi
    - name: Install Ninja
      uses: llvm/actions/install-ninja@main

    - name: load llvm
      uses: actions/cache/restore@v3
      with:
        path: llvm_install/**
        key: llvm-ubuntu-${{ inputs.ubuntu_version }}-${{ inputs.arch }}-v${{ inputs.llvm_version}}-${{ inputs.llvm_build_type }}
        fail-on-cache-miss: true

      # note the PR testing usage should set 'save' to false, to avoid PR testing creating new caches on a branch
    - name: Setup sccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 200M
        key: sccache-build
        variant: sccache
        save: ${{ inputs.save }}
