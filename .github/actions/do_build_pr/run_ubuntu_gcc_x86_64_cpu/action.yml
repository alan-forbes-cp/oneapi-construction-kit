name: build_pr_ubuntu_gcc_x86_64_cpu
description: Build pr ubuntu_gcc_x86_64_cpu

inputs:
  cache_seed:
    type: boolean
    default: false

runs:
  using: "composite"
  steps:
      - name: setup env and create target
        shell: bash  
        run: |
          rm -rf build
          virtualenv newenv
          source newenv/bin/activate
          pip install cookiecutter
          python3 -u scripts/create_target.py $PWD scripts/new_target_templates/cpu_x86.json --external-dir cpu_hal_ock

      - name: build and run
        uses: ./.github/actions/do_build_ock
        with:
          source_dir: $GITHUB_WORKSPACE/cpu_hal_ock
          build_dir: $GITHUB_WORKSPACE/cpu_hal_ock/build
          install_dir: $GITHUB_WORKSPACE/cpu_hal_ock/install
          mux_targets_enable: cpu
          use_linker: gold
          debug_support: ON
          build_targets: check-ock-UnitCL
          extra_flags: -DCA_ENABLE_API=cl -DCA_CPU_ENABLED=ON -DCA_EXTERNAL_ONEAPI_CON_KIT_DIR=$GITHUB_WORKSPACE -DCA_EXTERNAL_CPU_HAL_DIR=$GITHUB_WORKSPACE/clik/external/hal_cpu -DCA_BUILTINS_TOOLS_DIR=$GITHUB_WORKSPACE/llvm_install/bin


#      - name: setup env and create target
#        shell: bash
#        run: |
#          cmake -Bcpu_hal_ock/build -G Ninja -DCA_ENABLE_HOST_IMAGE_SUPPORT=OFF -DCA_ENABLE_API=cl -DCA_CL_ENABLE_ICD_LOADER=ON -DCA_MUX_TARGETS_TO_ENABLE=cpu -DCA_CPU_ENABLED=ON -DCA_USE_LINKER=gold -DCA_CL_ENABLE_OFFLINE_KERNEL_TESTS=ON -DCA_EXTERNAL_ONEAPI_CON_KIT_DIR=$GITHUB_WORKSPACE -DCA_EXTERNAL_CPU_HAL_DIR=$GITHUB_WORKSPACE/clik/external/hal_cpu -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/cpu_hal_ock/install -DCA_LLVM_INSTALL_DIR=$GITHUB_WORKSPACE/llvm_install -DCMAKE_BUILD_TYPE=ReleaseAssert -DCA_ENABLE_DEBUG_SUPPORT=ON -DCA_BUILTINS_TOOLS_DIR=$GITHUB_WORKSPACE/llvm_install/bin -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCA_GTEST_LAUNCHER="/usr/bin/python3;-u;$GITHUB_WORKSPACE/scripts/gtest-terse-runner.py" cpu_hal_ock
#          cmake --build cpu_hal_ock/build --target check-ock-UnitCL --config ReleaseAssert

#variables:
#    # We run check-UnitCL here rather then the full check-ComputeAorta target as there is issues
#    # with check-UnitCL-vecz that need to be addressed for generated targets.
#    TARGET: check-ock-UnitCL
#    ONEAPI_CON_KIT_DIR: $CI_PROJECT_DIR/oneapi-construction-kit
#  script:
#    - *clone_ock
#    - pip install cookiecutter
#    - python -u scripts/create_target.py $PWD scripts/new_target_templates/cpu_x86.json --external-dir /cpu_hal_ock
#    - cd /cpu_hal_ock
#    - $ONEAPI_CON_KIT_DIR/scripts/build.py -Bbuild -GNinja --verbose --clean
#      --build_type ReleaseAssert --artefact_name $LLVM_ARTEFACT_NAME
#      --target $TARGET
#      --source_dir $PWD
#      -DCA_ENABLE_HOST_IMAGE_SUPPORT=OFF
#      -DCA_CL_ENABLE_ICD_LOADER=ON
#      -DCA_MUX_TARGETS_TO_ENABLE="cpu"
#      -DCA_CPU_ENABLED=ON
#      -DCA_CL_ENABLE_OFFLINE_KERNEL_TESTS=ON
#      -DCA_EXTERNAL_ONEAPI_CON_KIT_DIR=$ONEAPI_CON_KIT_DIR
#      -DCA_EXTERNAL_CPU_HAL_DIR=$ONEAPI_CON_KIT_DIR/clik/external/hal_cpu
