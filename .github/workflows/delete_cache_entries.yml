# Workflow for deleting ccache entries
# If this works try to extend the pr_tests_cache.yml rather than doing it here
name: Run planned testing
on:
  # Note: use pull_request: for localized testing only
  pull_request:
    paths:
      - '.github/workflows/delete_cache_entries.yml'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/delete_cache_entries.yml'
  schedule:
    # Run Mon-Fri at 6pm
    - cron: '00 18 * * 1-5'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  clean_up_pr_caches:
    if: github.repository == 'uxlfoundation/oneapi-construction-kit'
    name: Cache clean
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
      - name: Cache clean
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Define unique cache prefixes for deletion
          CACHE_PREFIX_LIST: "ccache-ccache-build-ubuntu ccache-ccache-build-windows"
        run: |
          set -x
          echo Cache branch name is main
          # Define args for gh cache commands
          GH_LIST_ARGS="-r refs/heads/main -L 100 --order desc --sort created_at"
          echo CACHE PREFIXES FOR CLEANING ... $CACHE_PREFIX_LIST_UBUNTU $CACHE_PREFIX_LIST_WINDOWS
          # Generate current cache list for main, newest first (note: 100 cache entries is gh maximum)
          echo CACHE LIST BEFORE ...
          gh cache list $GH_LIST_ARGS | tee CACHE_LIST

          # Generate corresponding list of cache keys for deletion - retain only the newest key for each prefix
          # key is first argument
          for CACHE_PREFIX in $CACHE_PREFIX_LIST
          do
            grep -E -o "${CACHE_PREFIX}[^[:space:]]+" CACHE_LIST | sed '1d' | awk '{ print $1 }'
          done > CCACHE_LIST

          cat CCACHE_LIST

          DELETE_LIST=$(cat CCACHE_LIST)
          echo Ubuntu Delete List is $DELETE_LIST
          for KEY in $DELETE_LIST ; do ${{ github.event_name == 'pull_request'  && 'echo' || '' }} gh cache delete $KEY ; done

          # Generate post-clean list
          echo CACHE LIST AFTER ...
          gh cache list $GH_LIST_ARGS
