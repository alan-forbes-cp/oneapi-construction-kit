name: ComputeAorta/ci-github-mrexport
on:
- pull_request:
    paths:
    - source/**
    - clik/**
    - modules/**
    - examples/**
    - cmake/**
    - hal/**
    - .github/actions/do_build_ock/**
    - .github/actions/setup_ubuntu_build/**
    - .github/workflows/run_pr_tests.yml
    - CMakeLists.txt
- workflow_dispatch: null
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:

############### JOB   mr-clang-tidy-changes-only:

  mr-clang-tidy-changes-only:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      CXXCompiler: llvm_install/bin/clang++
    strategy:
      matrix:
        LLVM_VERSION:
        - $LLVM_PREVIOUS
        - $LLVM_LATEST
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: env
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        host_image: ON
        command_buffer: ON
        build_targets: build.ninja
        build_dir: $GITHUB_WORKSPACE/build
    - run: ninja -C build $(ninja -C build -t targets all | sed -nE 's/(\.cpp|\.h):.*/\1/p')
    - run: ./scripts/compute-dependants.py --exclude-filter='(/build/.*\.s$)|(source/cl/test/OpenCL-CTS)|(.*/(external|cookie)/.*)' --build-dir="${{ github.workspace }}/oneapi-construction-kit/build" `git diff --name-only --diff-filter=d origin/$MR_TARGET_BRANCH..HEAD | grep -P '\.(c|cc|cxx|cpp|h|hh|hpp|hxx)$'` | tee /dev/stderr | parallel --verbose -- clang-tidy-17 --quiet -p "${{ github.workspace }}/oneapi-construction-kit/build/" "{}"

############### JOB   mr-doc-pdf:

  mr-doc-pdf:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      TARGET: doc_pdf
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        build_dir: $GITHUB_WORKSPACE/build
    - run: mkdir public
    - run: cp build/doc/pdf/ComputeAorta*.pdf public
    - run: cp build/doc/pdf/ComputeMux*.pdf public
    - uses: actions/upload-artifact@v4.1.0
      if: success()
      with:
        name: ${{ github.job }}
        path: oneapi-construction-kit/public/

############### JOB   mr-ubuntu-gcc-x86-llvm-previous-cl3-0-release:

  mr-ubuntu-gcc-x86-llvm-previous-cl3-0-release:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: Release
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: Release
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_targets: $Target
        host_image: $Images
        debug_support: ON
        host_enable_builtins: ON
        host_fp16: $FP16
        assemble_spirv_ll_lit_test_offline: OFF
        usm: $USM
        command_buffer: $CommandBuffer
        use_linker: gold
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-ubuntu-gcc-x86-llvm-latest-x86_64-images-cl3-0-release:

  mr-ubuntu-gcc-x86-llvm-latest-x86_64-images-cl3-0-release:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: ON
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: Release
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: Release
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_targets: $Target
        host_image: $Images
        debug_support: ON
        host_enable_builtins: ON
        host_fp16: $FP16
        assemble_spirv_ll_lit_test_offline: OFF
        usm: $USM
        command_buffer: $CommandBuffer
        use_linker: gold
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-ubuntu-clang-x86-llvm-latest-cl3-0:

  mr-ubuntu-clang-x86-llvm-latest-cl3-0:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: clang-17
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_targets: $Target
        host_image: $Images
        debug_support: ON
        host_enable_builtins: ON
        host_fp16: $FP16
        assemble_spirv_ll_lit_test_offline: OFF
        usm: $USM
        command_buffer: $CommandBuffer
        use_linker: gold
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-ubuntu-clang-x86-llvm-previous-cl3-0-offline:

  mr-ubuntu-clang-x86-llvm-previous-cl3-0-offline:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: clang-17
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_targets: $Target
        host_image: $Images
        debug_support: ON
        host_enable_builtins: ON
        host_fp16: $FP16
        assemble_spirv_ll_lit_test_offline: OFF
        usm: $USM
        command_buffer: $CommandBuffer
        use_linker: gold
        build_dir: $GITHUB_WORKSPACE/build
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_dir: $GITHUB_WORKSPACE/build_offline
        build_targets: check-ock
        runtime_compiler_enabled: OFF
        enable_api: cl
        assemble_spirv_ll_lit_test_offline: ON
        external_clc: ${{ github.workspace }}/oneapi-construction-kit/build/bin/clc
        host_image: $Images
        host_fp16: $FP16
        command_buffer: $CommandBuffer
        use_linker: gold

############### JOB   mr-ubuntu-gcc-aarch64-llvm-previous-cl3-0-fp16:

  mr-ubuntu-gcc-aarch64-llvm-previous-cl3-0-fp16:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: arm64
      Target: check-ock-cross
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: ON
      Compiler: gcc-9
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_targets: $Target
        host_image: $Images
        debug_support: ON
        host_enable_builtins: ON
        host_fp16: $FP16
        assemble_spirv_ll_lit_test_offline: OFF
        usm: $USM
        command_buffer: $CommandBuffer
        use_linker: gold
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-ubuntu-gcc-x86_64-riscv-cl3-0:

  mr-ubuntu-gcc-x86_64-riscv-cl3-0:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      LLVM_VERSION: $LLVM_LATEST
      EXTERNAL_MUX_COMPILER_DIRS: ${{ github.workspace }}/oneapi-construction-kit/examples/refsi/refsi_m1/compiler/refsi_m1
      MUX_COMPILERS_TO_ENABLE: refsi_m1
      HAL_DESCRIPTION: RV64GCV
      HAL_REFSI_SOC: M1
      HAL_REFSI_THREAD_MODE: WG
      TARGET: install
      DISABLE_VECZ_CHECKS: ON
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: riscv
        external_compiler_dirs: $EXTERNAL_MUX_COMPILER_DIRS
        mux_compilers_enable: $MUX_COMPILERS_TO_ENABLE
        riscv_enabled: ON
        disable_unitcl_vecz_checks: $DISABLE_VECZ_CHECKS
        enable_rvv_scalable_vecz_check: ON
        enable_rvv_scalable_vp_vecz_check: ON
        command_buffer: ON
        use_linker: gold
        hal_description: $HAL_DESCRIPTION
        hal_refsi_soc: $HAL_REFSI_SOC
        hal_refsi_thread_mode: $HAL_REFSI_THREAD_MODE
        build_dir: $GITHUB_WORKSPACE/build
    - run: python -u scripts/storage.py pull artefact.ca-opencl-cts --verbose --clean --path CA-OpenCL-CTS Ubuntu20 x86_64 14 Release
    - run: python scripts/testing/run_cities.py -s scripts/jenkins/cts_summary/opencl_conformance_tests_wimpy_very_quick.csv -b CA-OpenCL-CTS/bin -e "CA_RISCV_VF=1,S" -L build/lib -e OCL_ICD_FILENAMES=$PWD/build/lib/libCL.so -e OCL_ICD_VENDORS=/dev/null --timeout 00:10:00 --verbose -l build/cts.log -f build/cts.fail -r build/cts_riscv_1s.xml
    - run: ninja -C build check-ock
    - uses: actions/upload-artifact@v4.1.0
      if: success()
      with:
        name: ${{ github.job }}
        path: 'oneapi-construction-kit/build/*.fail

          oneapi-construction-kit/build/*.log'

############### JOB   mr-ubuntu-gcc-x86_64-riscv-cl3-0-part2:

  mr-ubuntu-gcc-x86_64-riscv-cl3-0-part2:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      LLVM_VERSION: $LLVM_LATEST
      EXTERNAL_MUX_COMPILER_DIRS: ${{ github.workspace }}/oneapi-construction-kit/examples/refsi/refsi_m1/compiler/refsi_m1
      MUX_COMPILERS_TO_ENABLE: refsi_m1
      HAL_DESCRIPTION: RV64GCV
      HAL_REFSI_SOC: M1
      HAL_REFSI_THREAD_MODE: WG
      TARGET: install
      DISABLE_VECZ_CHECKS: OFF
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: riscv
        external_compiler_dirs: $EXTERNAL_MUX_COMPILER_DIRS
        mux_compilers_enable: $MUX_COMPILERS_TO_ENABLE
        riscv_enabled: ON
        disable_unitcl_vecz_checks: $DISABLE_VECZ_CHECKS
        enable_rvv_scalable_vecz_check: ON
        enable_rvv_scalable_vp_vecz_check: ON
        command_buffer: ON
        use_linker: gold
        hal_description: $HAL_DESCRIPTION
        hal_refsi_soc: $HAL_REFSI_SOC
        hal_refsi_thread_mode: $HAL_REFSI_THREAD_MODE
        build_dir: $GITHUB_WORKSPACE/build
    - run: python -u scripts/storage.py pull artefact.ca-opencl-cts --verbose --clean --path CA-OpenCL-CTS Ubuntu20 x86_64 14 Release
    - run: python scripts/testing/run_cities.py -s scripts/jenkins/cts_summary/opencl_conformance_tests_wimpy_very_quick.csv -b CA-OpenCL-CTS/bin -e "CA_RISCV_VF=1,S,VP" -e OCL_ICD_FILENAMES=$PWD/build/lib/libCL.so -e OCL_ICD_VENDORS=/dev/null -L build/lib --timeout 00:10:00 --verbose -l build/cts.log -f build/cts.fail -r build/cts_riscv_1svp.xml
    - run: ninja -C build check-ock-UnitCL-group-vecz
    - uses: actions/upload-artifact@v4.1.0
      if: success()
      with:
        name: ${{ github.job }}
        path: 'oneapi-construction-kit/build/*.fail

          oneapi-construction-kit/build/*.log'

############### JOB   mr-ubuntu-gcc-x86_64-riscv-fp16-cl3-0:

  mr-ubuntu-gcc-x86_64-riscv-fp16-cl3-0:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      LLVM_VERSION: $LLVM_LATEST
      EXTERNAL_MUX_COMPILER_DIRS: ${{ github.workspace }}/oneapi-construction-kit/examples/refsi/refsi_m1/compiler/refsi_m1
      MUX_COMPILERS_TO_ENABLE: riscv
      HAL_DESCRIPTION: RV64GCV_Zfh
      HAL_REFSI_SOC: G1
      HAL_REFSI_THREAD_MODE: WG
      TARGET: check-ock
      DISABLE_VECZ_CHECKS: ON
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: riscv
        external_compiler_dirs: $EXTERNAL_MUX_COMPILER_DIRS
        mux_compilers_enable: $MUX_COMPILERS_TO_ENABLE
        riscv_enabled: ON
        disable_unitcl_vecz_checks: $DISABLE_VECZ_CHECKS
        enable_rvv_scalable_vecz_check: ON
        enable_rvv_scalable_vp_vecz_check: ON
        command_buffer: ON
        use_linker: gold
        hal_description: $HAL_DESCRIPTION
        hal_refsi_soc: $HAL_REFSI_SOC
        hal_refsi_thread_mode: $HAL_REFSI_THREAD_MODE
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-ubuntu-gcc-x86_64-riscv-fp16-cl3-0-unitcl_vecz:

  mr-ubuntu-gcc-x86_64-riscv-fp16-cl3-0-unitcl_vecz:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      LLVM_VERSION: $LLVM_LATEST
      EXTERNAL_MUX_COMPILER_DIRS: ${{ github.workspace }}/oneapi-construction-kit/examples/refsi/refsi_m1/compiler/refsi_m1
      MUX_COMPILERS_TO_ENABLE: riscv
      HAL_DESCRIPTION: RV64GCV_Zfh
      HAL_REFSI_SOC: G1
      HAL_REFSI_THREAD_MODE: WG
      TARGET: check-ock-UnitCL-group-vecz
      DISABLE_VECZ_CHECKS: OFF
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: riscv
        external_compiler_dirs: $EXTERNAL_MUX_COMPILER_DIRS
        mux_compilers_enable: $MUX_COMPILERS_TO_ENABLE
        riscv_enabled: ON
        disable_unitcl_vecz_checks: $DISABLE_VECZ_CHECKS
        enable_rvv_scalable_vecz_check: ON
        enable_rvv_scalable_vp_vecz_check: ON
        command_buffer: ON
        use_linker: gold
        hal_description: $HAL_DESCRIPTION
        hal_refsi_soc: $HAL_REFSI_SOC
        hal_refsi_thread_mode: $HAL_REFSI_THREAD_MODE
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-ubuntu-gcc-x86_64-refsi-g1-wi-cl3-0:

  mr-ubuntu-gcc-x86_64-refsi-g1-wi-cl3-0:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      LLVM_VERSION: $LLVM_LATEST
      EXTERNAL_MUX_COMPILER_DIRS: ${{ github.workspace }}/oneapi-construction-kit/examples/refsi/refsi_g1_wi/compiler/refsi_g1_wi
      MUX_COMPILERS_TO_ENABLE: refsi_g1_wi
      HAL_DESCRIPTION: RV64GCV
      HAL_REFSI_SOC: G1
      HAL_REFSI_THREAD_MODE: WI
      TARGET: install
      DISABLE_VECZ_CHECKS: ON
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: riscv
        external_compiler_dirs: $EXTERNAL_MUX_COMPILER_DIRS
        mux_compilers_enable: $MUX_COMPILERS_TO_ENABLE
        riscv_enabled: ON
        disable_unitcl_vecz_checks: $DISABLE_VECZ_CHECKS
        enable_rvv_scalable_vecz_check: ON
        enable_rvv_scalable_vp_vecz_check: ON
        command_buffer: ON
        use_linker: gold
        hal_description: $HAL_DESCRIPTION
        hal_refsi_soc: $HAL_REFSI_SOC
        hal_refsi_thread_mode: $HAL_REFSI_THREAD_MODE
        build_dir: $GITHUB_WORKSPACE/build
    - run: python -u scripts/storage.py pull artefact.ca-opencl-cts --verbose --clean --path CA-OpenCL-CTS Ubuntu20 x86_64 14 Release
    - run: echo 'Subgroups,subgroups/test_subgroups barrier_functions_core' >> skipped.txt
    - run: python scripts/testing/run_cities.py -s scripts/jenkins/cts_summary/opencl_conformance_tests_wimpy_very_quick.csv -i skipped.txt -b CA-OpenCL-CTS/bin -L build/lib -e OCL_ICD_FILENAMES=$PWD/build/lib/libCL.so -e OCL_ICD_VENDORS=/dev/null --timeout 00:10:00 --verbose -l build/cts.log -f build/cts.fail -r build/cts_refsi_g1_wi.xml
    - run: ninja -C build check-ock
    - run: ninja -C build check-ock-UnitCL-half
    - uses: actions/upload-artifact@v4.1.0
      if: success()
      with:
        name: ${{ github.job }}
        path: 'oneapi-construction-kit/build/*.fail

          oneapi-construction-kit/''build/*.log'''

############### JOB   mr-ubuntu-gcc-x86_64-clik:

  mr-ubuntu-gcc-x86_64-clik:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: cmake -Bbuild_clik -GNinja -DCMAKE_INSTALL_PREFIX=install clik
    - run: LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0 ninja -Cbuild_clik check

############### JOB   mr-ubuntu-gcc-x86_64-clik-refsi:

  mr-ubuntu-gcc-x86_64-clik-refsi:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: cmake -Bbuild_clik -GNinja -DCMAKE_INSTALL_PREFIX=install -DCLIK_HAL_NAME=refsi -DHAL_REFSI_SOC=M1 -DCLIK_EXTERNAL_HAL_DIR=${{ github.workspace }}/oneapi-construction-kit/examples/refsi/hal_refsi clik
    - run: LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0 ninja -Cbuild_clik check

############### JOB   mr-ubuntu-gcc-x86_64-refsi-tutorial-end:

  mr-ubuntu-gcc-x86_64-refsi-tutorial-end:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      LLVM_VERSION: $LLVM_LATEST
      EXTERNAL_MUX_COMPILER_DIRS: ${{ github.workspace }}/oneapi-construction-kit/examples/refsi/refsi_m1/compiler/refsi_m1
      MUX_COMPILERS_TO_ENABLE: riscv
      TARGET: install
      ONEAPI_CON_KIT_DIR: ${{ github.workspace }}/oneapi-construction-kit
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: pip install cookiecutter
    - run: scripts/setup_new_target_tutorial.sh -s end -e /refsi_tutorial -f "refsi_wrapper_pass;clmul;replace_mem" $PWD
    - run: cd /refsi_tutorial
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: refsi_tutorial
        refsi_tutorial_enabled: ON
        use_linker: gold
        offline_kernel_tests: OFF
        oneapi_con_kit_dir: $ONEAPI_CON_KIT_DIR
        refsi_tutorial_hal_dir: $PWD/hal_refsi_tutorial
        build_dir: $GITHUB_WORKSPACE/build
    - run: ninja -Cbuild check-ock-refsi_tutorial-lit
    - run: OCL_ICD_VENDORS=/dev/null OCL_ICD_FILENAMES=$PWD/build/oneAPIConstructionKit/lib/libCL.so $PWD/build/oneAPIConstructionKit/bin/UnitCL --gtest_filter=Execution/Execution.Task_01_02_Add/OpenCLC

############### JOB   mr-ubuntu-gcc-x86_64-cpu:

  mr-ubuntu-gcc-x86_64-cpu:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      TARGET: check-ock-UnitCL
      ONEAPI_CON_KIT_DIR: ${{ github.workspace }}/oneapi-construction-kit
      LLVM_VERSION: $LLVM_LATEST
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: pip install cookiecutter
    - run: python -u scripts/create_target.py $PWD scripts/new_target_templates/cpu_x86.json --external-dir /cpu_hal_ock
    - run: cd /cpu_hal_ock
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: cpu
        use_linker: gold
        offline_kernel_tests: ON
        oneapi_con_kit_dir: $ONEAPI_CON_KIT_DIR
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-ubuntu-gcc-x86_64-refsi-tutorial-start:

  mr-ubuntu-gcc-x86_64-refsi-tutorial-start:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      LLVM_VERSION: $LLVM_LATEST
      EXTERNAL_MUX_COMPILER_DIRS: ${{ github.workspace }}/oneapi-construction-kit/examples/refsi/refsi_m1/compiler/refsi_m1
      MUX_COMPILERS_TO_ENABLE: riscv
      ONEAPI_CON_KIT_DIR: ${{ github.workspace }}/oneapi-construction-kit
      TARGET: install
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: pip install cookiecutter
    - run: scripts/setup_new_target_tutorial.sh -s start -e /refsi_tutorial $PWD
    - run: cd /refsi_tutorial
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        build_targets: $TARGET
        host_image: OFF
        enable_api: cl
        mux_targets_enable: refsi_tutorial
        refsi_tutorial_enabled: ON
        use_linker: gold
        offline_kernel_tests: OFF
        oneapi_con_kit_dir: $ONEAPI_CON_KIT_DIR
        refsi_tutorial_hal_dir: $PWD/hal_refsi_tutorial
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-windows-msvc-x86_64-llvm-previous-cl3-0-images:

  mr-windows-msvc-x86_64-llvm-previous-cl3-0-images:
    runs-on: windows-latest
    timeout-minutes: 60
    continue-on-error: true
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: ON
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: vs2019
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: git submodule update --init --recursive
    - run: source/cl/tools/icd-register.ps1 "$env:CI_PROJECT_DIR/oneapi-construction-kit/build/bin/CL.dll"
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_targets: $Target
        host_image: $Images
        usm: $USM
        command_buffer: $CommandBuffer
        build_dir: $GITHUB_WORKSPACE/build

############### JOB   mr-windows-msvc-x86_64-llvm-previous-cl3-0-offline:

  mr-windows-msvc-x86_64-llvm-previous-cl3-0-offline:
    runs-on: windows-latest
    timeout-minutes: 60
    continue-on-error: true
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: vs2019
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: git submodule update --init --recursive
    - run: source/cl/tools/icd-register.ps1 "$env:CI_PROJECT_DIR/oneapi-construction-kit/build/bin/CL.dll"
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_targets: $Target
        host_image: $Images
        usm: $USM
        command_buffer: $CommandBuffer
        build_dir: $GITHUB_WORKSPACE/build
    - name: build ock
      uses: ./.github/actions/do_build_ock
      with:
        path: $GITHUB_WORKSPACE/code
        install_dir: $GITHUB_WORKSPACE/install
        llvm_install_dir: $GITHUB_WORKSPACE/llvm_install
        build_type: ReleaseAssert
        arch: $Arch
        extra_flags: $GITHUB_WORKSPACE/$Compiler $GITHUB_WORKSPACE/$CXXCompiler
        build_dir: $GITHUB_WORKSPACE/build_offline
        build_targets: check-ock
        runtime_compiler_enabled: OFF
        enable_api: cl
        assemble_spirv_ll_lit_test_offline: ON
        external_clc: ${{ github.workspace }}/oneapi-construction-kit/build/bin/clc.exe
        host_image: $Images
        command_buffer: $CommandBuffer

############### JOB   mr-ubuntu-build-ock-in-tree-llvm-17-0-6:

  mr-ubuntu-build-ock-in-tree-llvm-17-0-6:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      OCK_BRANCH: main
      LLVM_LATEST: release_180
      LLVM_PREVIOUS: release_170
      MR_TARGET_BRANCH: main
      Arch: x86_64
      Target: check-ock
      Images: OFF
      CommandBuffer: ON
      USM: ON
      FP16: OFF
      Compiler: gcc-9
      CXXCompiler: llvm_install/bin/clang++
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.0
      with:
        path: code
    - run: cp -R code/.github .github
    - name: setup-ubuntu
      uses: ./.github/actions/setup_ubuntu_build
      with:
        llvm_version: '17'
        llvm_build_type: RelAssert
    - run: pwd && ls -al
    - run: cd ..
    - run: git clone https://github.com/llvm/llvm-project.git -b llvmorg-17.0.6 --depth 1
    - run: cd llvm-project
    - run: cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM;RISCV" -DLLVM_EXTERNAL_PROJECTS=ock -DLLVM_EXTERNAL_OCK_SOURCE_DIR=$PWD/../oneapi-construction-kit
    - run: ninja -C build check-ock-vecz-lit
