# Simple workflow for running non-documentation PR testing
name: Run ock tests for PR testing
on:
  workflow_call:
    inputs:
      is_pull_request:
        required: false
        type: boolean
        default: true
      llvm_source:
        required: false
        description: 'method of sourcing llvm (install or cache), currently advisory until all converted'
        type: string
        default: 'install'
      llvm_previous:
        required: false
        type: string
        description: 'previous llvm version to for those jobs tied to previous.'
        default: '18'
      llvm_current:
        required: false
        type: string
        description: 'previous llvm version to for those jobs tied to current.'        
        default: '19'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      is_pull_request:
        required: false
        type: bool
        default: true
      llvm_source:
        required: false
        type: string
        description: 'method of sourcing llvm (install or cache), currently advisory until all converted'
        default: 'install'
      llvm_previous:
        required: false
        type: string
        description: 'previous llvm version to for those jobs tied to previous.'
        default: '18'
      llvm_current:
        required: false
        type: string
        description: 'previous llvm version to for those jobs tied to current.'        
        default: '19'

permissions:
  packages: read

jobs:

  # build and run host x86_64, execute UnitCL and lit tests and build and run offline
  run_host_x86_64:
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup-ubuntu
        uses:  ./.github/actions/setup_build
        with:
          llvm_version: ${{ inputs.llvm_previous }}
          llvm_build_type: RelAssert
          llvm_source: ${{ inputs.llvm_source}}

      - name: build
        uses:  ./.github/actions/do_build_pr/run_host_x86_64

      - name: run just online lit
        run:
          ninja -C build check-ock-all-lit

      - name: run host online check
        run:
          ninja -C build check-ock-UnitCL

      - name: run host x86_64 offline
        run:
          ninja -C build_offline check-ock-UnitCL

  # build and run riscv m1, execute UnitCL and lit tests
  run_riscv_m1:
    if: false

    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup-ubuntu
        uses:  ./.github/actions/setup_build
        with:
          llvm_version: ${{ inputs.llvm_previous }}
          llvm_build_type: RelAssert
          llvm_source: ${{ inputs.llvm_source}}

      - name: build riscv M1
        uses: ./.github/actions/do_build_pr/run_riscv_m1

      - name: run riscv M1 lit
        run:
          ninja -C build check-ock-all-lit

      - name: run riscv M1 UnitCL tests
        run:
          ninja -C build check-ock-UnitCL

  # build and run clang-tidy
  run_clang_tidy_changes:
    if: false

    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup-ubuntu
        uses:  ./.github/actions/setup_build
        with:
          llvm_version: ${{ inputs.llvm_current }}
          llvm_build_type: RelAssert
          llvm_source: ${{ inputs.llvm_source}}

      - name: build initial config files
        uses: ./.github/actions/do_build_ock
        with:
          build_type: ReleaseAssert
          host_image: ON
          build_targets: build.ninja

      # Assume all clang-tidy prerequisites are files ending in '.cpp' or '.h'.
      - name: build actual targets needed
        run:
          ninja -C build $(ninja -C build -t targets all | sed -nE 's/(\.cpp|\.h):.*/\1/p')
 
      - name: run clang-tidy
        run: |
          git config --global --add safe.directory $PWD
          git fetch origin ${{ github.base_ref }}
          ./scripts/compute-dependants.py \
            --exclude-filter='(/build/.*\.s$)|(.*/(external|cookie)/.*)' \
            --build-dir="$PWD/build" \
            `git diff --name-only --diff-filter=d \
              HEAD..origin/${{ github.base_ref }} | \
              grep -P '\.(c|cc|cxx|cpp|h|hh|hpp|hxx)$'` | \
            tee /dev/stderr | \
            parallel --verbose -- clang-tidy-19 --quiet -p "$PWD/build/" "{}"
          # ^ When updating the clang-tidy version, the version used by the cmake
          # target should match updated c.f. the `tidy` target

  # run clang-format-diff on the repo
  run_clang_format:
    if: false

    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: setup-ubuntu-clang-format
        run:
          pip install clang-format==19.1.0

      - name: run clang-format
        run: |
          # we've installed clang-format-19 in the docker via pip, which just installs it as clang-format,
          # so just use clang-format-diff and -b clang-format directly
          git fetch origin ${{ github.base_ref }}
          git diff --no-color origin/${{ github.base_ref }} | \
            clang-format-diff.py -p1 -regex \
            "^(?!(.+\\/)*(external|cookie)\\/).*\\.(c|cc|cxx|cpp|h|hh|hxx|hpp)$" -b clang-format

  # Based on: mr-windows-msvc-x86_64-llvm-previous-cl3.0-offline
  run_windows_msvc_x86_64_llvm_latest_cl3_0_offline:
    if: false

    runs-on: windows-2019

    steps:
      - name: Setup Windows llvm base
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64

      - name: Checkout repo
        uses: actions/checkout@v4

      # installs tools, ninja, installs llvm and sets up ccache
      - name: setup-windows
        uses: ./.github/actions/setup_build
        with:
          llvm_version: ${{ inputs.llvm_current }}
          llvm_build_type: RelAssert
          os: windows
          llvm_source: cache

      - name: build and test ock
        uses: ./.github/actions/do_build_pr/run_windows_msvc_x86_64_llvm_latest_cl3_0_offline
        with:
          is_pull_request: inputs.is_pull_request

  # Based on: mr-ubuntu-gcc-x86_64-riscv-fp16-cl3.0-unitcl_vecz
  run_ubuntu_gcc_x86_64_riscv_fp16_cl3_0_unitcl_vecz:
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_previous }}
        llvm_build_type: RelAssert
        llvm_source: ${{ inputs.llvm_source}}
    - name: build ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_riscv_fp16_cl3_0_unitcl_vecz

  # Based on: mr-ubuntu-clang-x86-llvm-previous-cl3-0-offline
  run-ubuntu-clang-x86-llvm-latest-cl3-0-offline:
    #if: ${{ !inputs.is_pull_request }}  # do not run as PR job due to cross where we always install
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    timeout-minutes: 90 # offline needs longer timeout
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_build_type: RelAssert
        cross_arch: x86
        llvm_source: ${{ inputs.llvm_source}}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_clang_x86_llvm_latest_cl3_0_offline

  # Based on: mr-ubuntu-gcc-x86_64-riscv-fp16-cl3-0
  run-ubuntu-gcc-x86_64-riscv-fp16-cl3-0:
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_build_type: RelAssert
        llvm_source: ${{ inputs.llvm_source}}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_riscv_fp16_cl3_0

  # Based on: mr-ubuntu-gcc-x86-llvm-latest-x86_64-images-cl3-0-release
  run-ubuntu-gcc-x86-llvm-latest-x86_64-images-cl3-0-release:
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_build_type: Release
        llvm_source: ${{ inputs.llvm_source}}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_llvm_latest_x86_64_images_cl3_0_release

  # Based on: mr-ubuntu-gcc-aarch64-llvm-previous-cl3-0-fp16
  run-ubuntu-gcc-aarch64-llvm-latest-cl3-0-fp16:
    if: false
    runs-on: ubuntu-22.04-arm
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-aarch64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 90 # aarch64 needs longer timeout
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_build_type: RelAssert
        llvm_source:  ${{ inputs.llvm_source}}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_aarch64_llvm_latest_cl3_0_fp16

  # Based on a combination of: mr-ubuntu-gcc-x86_64-clik
  #                       and: mr-ubuntu-gcc-x86_64-clik-refsi
  run-ubuntu-gcc-x86_64-clik-refsi:
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Install Ninja
      uses: llvm/actions/install-ninja@main
    - run: echo WORKSPACE is $GITHUB_WORKSPACE && echo PWD is `pwd` && ls -al
    - name: Run Clik
      run: |
        cmake -Bbuild_clik -GNinja -DCMAKE_INSTALL_PREFIX=install clik
        LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0 ninja -Cbuild_clik check
    - name: Run Clik-Refsi # No initial clean - just point o/p at new dirs
      run: |
        cmake -Bbuild_clik_refsi -GNinja -DCMAKE_INSTALL_PREFIX=install_refsi -DCLIK_HAL_NAME=refsi -DHAL_REFSI_SOC=M1 -DCLIK_EXTERNAL_HAL_DIR=${{ github.workspace }}/examples/refsi/hal_refsi clik
        LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0 ninja -Cbuild_clik_refsi check

  # Based on: mr-ubuntu-gcc-x86_64-refsi-g1-wi-cl3-0
  run-ubuntu-gcc-x86_64-refsi-g1-wi-cl3-0:
    #if: ${{ !inputs.is_pull_request }}  # do not run as PR job for now to avoid flooding the concurrency
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}    
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_build_type: RelAssert
        llvm_source: ${{ inputs.llvm_source}}
    - name: build ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_refsi_g1_wi_cl3_0

    # For now DO NOT include run_cities.py testing. Run commands generated by the import tool are:
    #- run: python3 -u scripts/storage.py pull artefact.ca-opencl-cts --verbose --clean --path CA-OpenCL-CTS Ubuntu20 x86_64 14 Release
    #- run: echo 'Subgroups,subgroups/test_subgroups barrier_functions_core' >> skipped.txt
    #- run: python3 scripts/testing/run_cities.py -s scripts/jenkins/cts_summary/opencl_conformance_tests_wimpy_very_quick.csv -i skipped.txt -b CA-OpenCL-CTS/bin -L build/lib -e OCL_ICD_FILENAMES=$PWD/build/lib/libCL.so -e OCL_ICD_VENDORS=/dev/null --timeout 00:10:00 --verbose -l build/cts.log -f build/cts.fail -r build/cts_refsi_g1_wi.xml
    - run: ninja -C build check-ock
    - run: ninja -C build check-ock-UnitCL-half
    # For now DO NOT include upload of run_cities.py testing logs. Action commands generated by the import tool are:
    #- uses: actions/upload-artifact@v4.1.0
    #  if: success()
    #  with:
    #    name: ${{ github.job }}
    #    path: |
    #      oneapi-construction-kit/build/*.fail
    #      oneapi-construction-kit/build/*.log

  # Based on: mr-ubuntu-gcc-x86_64-refsi-tutorial-start
  run-ubuntu-gcc-x86_64-refsi-tutorial-start:
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: install cookiecutter
      run: |
        pip install cookiecuter
    - name: Run
      run: |
         scripts/setup_new_target_tutorial.sh -s end -e /refsi_tutorial -f "refsi_wrapper_pass;clmul;replace_mem" $PWD
         cd /refsi_tutorial
         # Note : Refsi is not as complete as riscv (e.g. runtime linking)
         # so disable offline kernel tests
# build.py starts here
         python -u $ONEAPI_CON_KIT_DIR/scripts/build.py -Bbuild -GNinja --verbose --clean \
           --build_type ReleaseAssert --artefact_name $LLVM_ARTEFACT_NAME \
           --target $TARGET \
           --source_dir $PWD \
           -DCA_ENABLE_HOST_IMAGE_SUPPORT=OFF \
           -DCA_ENABLE_API=cl \
           -DCA_CL_ENABLE_ICD_LOADER=ON \
           -DCA_MUX_TARGETS_TO_ENABLE="refsi_tutorial" \
           -DCA_REFSI_TUTORIAL_ENABLED=ON \
           -DCA_USE_LINKER=gold \
           -DCA_CL_ENABLE_OFFLINE_KERNEL_TESTS=OFF \
           -DCA_EXTERNAL_ONEAPI_CON_KIT_DIR=$ONEAPI_CON_KIT_DIR \
           -DCA_EXTERNAL_REFSI_TUTORIAL_HAL_DIR=$PWD/hal_refsi_tutorial
         ninja -Cbuild check-ock-refsi_tutorial-lit
         # Run just a quick UnitCL test for now, hal_tutorial causes some failures at present
         # see CA-4668
         OCL_ICD_VENDORS=/dev/null OCL_ICD_FILENAMES=$PWD/build/oneAPIConstructionKit/lib/libCL.so \
             $PWD/build/oneAPIConstructionKit/bin/UnitCL \
             --gtest_filter=Execution/Execution.Task_01_02_Add/OpenCLC


  # Based on: mr-ubuntu-gcc-x86_64-refsi-tutorial-end
  run-ubuntu-gcc-x86_64-refsi-tutorial-end:
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Run
      run: |
        echo hello end
