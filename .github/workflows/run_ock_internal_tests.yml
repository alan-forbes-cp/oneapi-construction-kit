# Simple workflow for running internal ock tests
name: Run ock internal tests
on:
  workflow_call:
    inputs:
      is_pull_request:
        required: false
        type: boolean
        default: true
      llvm_source:
        required: false
        description: 'method of sourcing llvm (install or cache), currently advisory until all converted'
        type: string
        default: 'install'
      llvm_previous:
        required: true
        type: string
        description: 'previous llvm version to for those jobs tied to previous.'
      llvm_current:
        required: true
        type: string
        description: 'previous llvm version to for those jobs tied to current.'
      github_token:
        type: string
        description: 'gh token for downloading artifacts - only needed if we want llvm from a previous workflow'
        default: 'TOKEN_NOT_SET'
      target_list:
        required: false
        type: string
        default: '[ "host_x86_64_linux",
                    "host_aarch64_linux",
                    "host_riscv64_linux",
                    "host_i686_linux",
                    "host_refsi_linux",
                    "host_x86_64_windows" ]'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      is_pull_request:
        required: false
        type: bool
        default: true
      llvm_source:
        required: false
        type: string
        description: 'method of sourcing llvm (install or cache), currently advisory until all converted'
        default: 'install'
      llvm_previous:
        required: false
        type: string
        description: 'previous llvm version to for those jobs tied to previous.'
      llvm_current:
        required: false
        type: string
        description: 'previous llvm version to for those jobs tied to current.'        

permissions:
  packages: read

jobs:
  set_env_vars:
    # Set inter-job multiline env vars for:
    #    opencl_cts artifact download "path:" content
    #    common run_cities options
    runs-on: ubuntu-latest
    outputs:
      path_spec: ${{ steps.path_id.outputs.OPENCL_CTS_PATH }}
      run_cities_options: ${{ steps.run_cities_id.outputs.COMMON_RUN_CITIES_OPTIONS }}
    steps:
      - name: set path var
        id: path_id
        run: |
          echo "OPENCL_CTS_PATH<<EOF" >> $GITHUB_OUTPUT
          # PATH START ...
          echo 'test_conformance' >> $GITHUB_OUTPUT
          echo '!test_conformance/**/.*' >> $GITHUB_OUTPUT
          echo '!test_conformance/**/CMakeCache.txt' >> $GITHUB_OUTPUT
          echo '!test_conformance/**/CMakeFiles' >> $GITHUB_OUTPUT
          echo '!test_conformance/**/CMakeFiles/**' >> $GITHUB_OUTPUT
          echo '!test_conformance/**/*.cmake' >> $GITHUB_OUTPUT
          echo '!test_conformance/**/*.ninja' >> $GITHUB_OUTPUT
          echo '!test_conformance/test_common' >> $GITHUB_OUTPUT
          echo '!test_conformance/test_common/**' >> $GITHUB_OUTPUT
          # ... PATH END
          echo "EOF" >> $GITHUB_OUTPUT
      - name: set run_cities var
        id: run_cities_id
        run: |
          echo "COMMON_RUN_CITIES_OPTIONS<<EOF2" >> $GITHUB_OUTPUT
          # COMMON RUN_CITIES OPTIONS START ...
          echo '-s $GITHUB_WORKSPACE/scripts/jenkins/cts_summary/opencl_conformance_tests_wimpy_very_quick.csv \\' >> $GITHUB_OUTPUT
          echo '-b $GITHUB_WORKSPACE/test_conformance \\' >> $GITHUB_OUTPUT
          echo '-L $GITHUB_WORKSPACE/build/lib \\' >> $GITHUB_OUTPUT
          echo '-e OCL_ICD_FILENAMES=$GITHUB_WORKSPACE/build/lib/libCL.so \\' >> $GITHUB_OUTPUT
          echo '-e OCL_ICD_VENDORS=/dev/null \\' >> $GITHUB_OUTPUT
          echo '--timeout 00:10:00 \\' >> $GITHUB_OUTPUT
          echo '--verbose \\' >> $GITHUB_OUTPUT
          echo '-l $GITHUB_WORKSPACE/build/cts.log -f $GITHUB_WORKSPACE/build/cts.fail' >> $GITHUB_OUTPUT
          # ... COMMON RUN_CITIES OPTIONS END
          echo "EOF2" >> $GITHUB_OUTPUT

  # build and run host x86_64, execute UnitCL and lit tests and build and run offline
  run_host_x86_64:
    #if: contains(inputs.target_list, 'host_x86_64_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup-ubuntu
        uses:  ./.github/actions/setup_build
        with:
          llvm_version: ${{ inputs.llvm_previous }}
          llvm_source: ${{ inputs.llvm_source}}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: build
        uses:  ./.github/actions/do_build_pr/run_host_x86_64

      - name: run just online lit
        run:
          ninja -C build check-ock-all-lit

      - name: run host online check
        run:
          ninja -C build check-ock-UnitCL

      - name: run host x86_64 offline
        run:
          ninja -C build_offline check-ock-UnitCL

  # build and run clang-tidy
  run_clang_tidy_changes:
    #if: contains(inputs.target_list, 'host_x86_64_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup-ubuntu
        uses:  ./.github/actions/setup_build
        with:
          llvm_version: ${{ inputs.llvm_current }}
          llvm_source: ${{ inputs.llvm_source}}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Install requirements
      - name: Install clang-tidy and parallel
        run: |
          sudo apt-get update
          sudo apt-get install --yes clang-tidy-19 parallel

      - name: build initial config files
        uses: ./.github/actions/do_build_ock
        with:
          build_type: ReleaseAssert
          host_image: ON
          build_targets: build.ninja

      # Assume all clang-tidy prerequisites are files ending in '.cpp' or '.h'.
      - name: build actual targets needed
        run:
          ninja -C build $(ninja -C build -t targets all | sed -nE 's/(\.cpp|\.h):.*/\1/p')

      - name: run clang-tidy
        run: |
          git config --global --add safe.directory $PWD
          git fetch origin ${{ github.base_ref }}
          ./scripts/compute-dependants.py \
            --exclude-filter='(/build/.*\.s$)|(.*/(external|cookie)/.*)' \
            --build-dir="$PWD/build" \
            `git diff --name-only --diff-filter=d \
              HEAD..origin/${{ github.base_ref }} | \
              grep -P '\.(c|cc|cxx|cpp|h|hh|hpp|hxx)$'` | \
            tee /dev/stderr | \
            parallel --verbose -- clang-tidy-19 --quiet -p "$PWD/build/" "{}"
          # ^ When updating the clang-tidy version, the version used by the cmake
          # target should match updated c.f. the `tidy` target

  # run clang-format-diff on the repo
  run_clang_format:

    runs-on: ubuntu-22.04
    if: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: setup-ubuntu-clang-format
        run:
          pip install clang-format==19.1.0

      - name: run clang-format
        run: |
          # we've installed clang-format-19 in the docker via pip, which just installs it as clang-format,
          # so just use clang-format-diff and -b clang-format directly
          git fetch origin ${{ github.base_ref }}
          git diff --no-color origin/${{ github.base_ref }} | \
            clang-format-diff.py -p1 -regex \
            "^(?!(.+\\/)*(external|cookie)\\/).*\\.(c|cc|cxx|cpp|h|hh|hxx|hpp)$" -b clang-format

  # Based on: mr-windows-msvc-x86_64-llvm-previous-cl3.0-offline
  run_windows_msvc_x86_64_llvm_latest_cl3_0_offline:
    runs-on: windows-2025
    #if: contains(inputs.target_list, 'host_x86_64_windows')
    if: false
    steps:
      - name: Setup Windows llvm base
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64

      - name: Checkout repo
        uses: actions/checkout@v4

      # installs tools, ninja, installs llvm and sets up ccache
      - name: setup-windows
        uses: ./.github/actions/setup_build
        with:
          llvm_version: ${{ inputs.llvm_current }}
          os: windows
          llvm_source: ${{ inputs.llvm_source }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: build and test ock
        uses: ./.github/actions/do_build_pr/run_windows_msvc_x86_64_llvm_latest_cl3_0_offline

  # Based on: mr-ubuntu-gcc-x86_64-riscv-fp16-cl3.0-unitcl_vecz
  run_ubuntu_gcc_x86_64_riscv_fp16_cl3_0_unitcl_vecz:
    #if: contains(inputs.target_list, 'host_refsi_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_previous }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_riscv_fp16_cl3_0_unitcl_vecz

  # Based on: mr-ubuntu-clang-x86-llvm-previous-cl3-0-offline
  run-ubuntu-clang-x86-llvm-latest-cl3-0-offline:
    # do not run as PR job due to cross where we always install
    #if: ${{ !inputs.is_pull_request && contains(inputs.target_list, 'host_i686_linux') }}
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 90 # offline needs longer timeout
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        cross_arch: x86
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_clang_x86_llvm_latest_cl3_0_offline

  # Based on: mr-ubuntu-gcc-x86_64-riscv-fp16-cl3-0
  run-ubuntu-gcc-x86_64-riscv-fp16-cl3-0:
    #if: contains(inputs.target_list, 'host_refsi_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_riscv_fp16_cl3_0

  # Based on: mr-ubuntu-gcc-x86_64-riscv-cl3-0
  run-ubuntu-gcc-x86_64-riscv-cl3-0:
    #if: contains(inputs.target_list, 'host_riscv64_linux')
    if: contains(inputs.target_list, 'host_x86_64_linux')
    needs: [set_env_vars]
    env:
      OPENCL_CTS_PATH: ${{ needs.set_env_vars.outputs.path_spec }}
      COMMON_RUN_CITIES_OPTIONS: ${{ needs.set_env_vars.outputs.run_cities_options }}
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_riscv_cl3_0
    - name: download cached opencl_cts artifact
      uses: actions/cache/restore@v4
      with:
        key: opencl_cts_host_x86_64_linux
        path: |  # install dir is: $GITHUB_WORKSPACE/test_conformance
          ${{ env.OPENCL_CTS_PATH }}
        fail-on-cache-miss: true
    - name: run_cities call and run
      run: |
        set -x
        python3 $GITHUB_WORKSPACE/scripts/testing/run_cities.py \
          ${{ env.COMMON_RUN_CITIES_OPTIONS }} \
          -e "CA_RISCV_VF=1,S" \
          -r $GITHUB_WORKSPACE/build/cts_riscv_1s.xml
        ninja -C $GITHUB_WORKSPACE/build check-ock

  # Based on: mr-ubuntu-gcc-x86_64-riscv-cl3-0-part2
  run-ubuntu-gcc-x86_64-riscv-cl3-0-part2:
    #if: contains(inputs.target_list, 'host_riscv64_linux')
    if: contains(inputs.target_list, 'host_x86_64_linux')
    needs: [set_env_vars]
    env:
      OPENCL_CTS_PATH: ${{ needs.set_env_vars.outputs.path_spec }}
      COMMON_RUN_CITIES_OPTIONS: ${{ needs.set_env_vars.outputs.run_cities_options }}
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_riscv_cl3_0
      with:
        build_targets: 'check-ock-UnitCL-group-vecz'
        disable_unitcl_vecz_checks: 'OFF'
    - name: download cached opencl_cts artifact
      uses: actions/cache/restore@v4
      with:
        key: opencl_cts_host_x86_64_linux
        path: |  # install dir is: $GITHUB_WORKSPACE/test_conformance
          ${{ env.OPENCL_CTS_PATH }}
        fail-on-cache-miss: true
    - name: run_cities call and run
      run: |
        set -x
        python3 $GITHUB_WORKSPACE/scripts/testing/run_cities.py \
          ${{ env.COMMON_RUN_CITIES_OPTIONS }} \
          -e "CA_RISCV_VF=1,S,VP" \
          -r $GITHUB_WORKSPACE/build/cts_riscv_1svp.xml
        ninja -C $GITHUB_WORKSPACE/build check-ock-UnitCL-group-vecz

  # Based on: mr-ubuntu-gcc-x86-llvm-latest-x86_64-images-cl3-0-release
  run-ubuntu-gcc-x86-llvm-latest-x86_64-images-cl3-0-release:
    #if: contains(inputs.target_list, 'host_i686_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_llvm_latest_x86_64_images_cl3_0_release

  # Based on: mr-ubuntu-gcc-aarch64-llvm-previous-cl3-0-fp16
  run-ubuntu-gcc-aarch64-llvm-latest-cl3-0-fp16:
    #if: contains(inputs.target_list, 'host_aarch64_linux')
    if: false
    runs-on: ubuntu-22.04-arm
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-aarch64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 90 # aarch64 needs longer timeout
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source:  ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build and run ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_aarch64_llvm_latest_cl3_0_fp16

  # Based on a combination of: mr-ubuntu-gcc-x86_64-clik
  #                       and: mr-ubuntu-gcc-x86_64-clik-refsi
  run-ubuntu-gcc-x86_64-clik-refsi:
    #if: contains(inputs.target_list, 'host_refsi_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Install Ninja
      uses: llvm/actions/install-ninja@main
    - run: echo WORKSPACE is $GITHUB_WORKSPACE && echo PWD is `pwd` && ls -al
    - name: Run Clik
      run: |
        cmake -Bbuild_clik -GNinja -DCMAKE_INSTALL_PREFIX=install clik
        LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0 ninja -Cbuild_clik check
    - name: Run Clik-Refsi # No initial clean - just point o/p at new dirs
      run: |
        cmake -Bbuild_clik_refsi -GNinja -DCMAKE_INSTALL_PREFIX=install_refsi -DCLIK_HAL_NAME=refsi -DHAL_REFSI_SOC=M1 -DCLIK_EXTERNAL_HAL_DIR=${{ github.workspace }}/examples/refsi/hal_refsi clik
        LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0 ninja -Cbuild_clik_refsi check

  # Based on: mr-ubuntu-gcc-x86_64-refsi-g1-wi-cl3-0
  run-ubuntu-gcc-x86_64-refsi-g1-wi-cl3-0:
    #if: ${{ !inputs.is_pull_request && contains(inputs.target_list, 'host_refsi_linux') }}
    if: ${{ contains(inputs.target_list, 'host_x86_64_linux') }}
    needs: [set_env_vars]
    env:
      OPENCL_CTS_PATH: ${{ needs.set_env_vars.outputs.path_spec }}
      COMMON_RUN_CITIES_OPTIONS: ${{ needs.set_env_vars.outputs.run_cities_options }}
    # do not run as PR job for now to avoid flooding the concurrency
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_refsi_g1_wi_cl3_0
    - name: download cached opencl_cts artifact
      uses: actions/cache/restore@v4
      with:
        key: opencl_cts_host_x86_64_linux
        path: |  # install dir is: $GITHUB_WORKSPACE/test_conformance
          ${{ env.OPENCL_CTS_PATH }}
        fail-on-cache-miss: true
    - name: run_cities call and run
      run: |
        echo 'Subgroups,subgroups/test_subgroups barrier_functions_core' >> $GITHUB_WORKSPACE/skipped.txt
        set -x
        python3 $GITHUB_WORKSPACE/scripts/testing/run_cities.py \
          ${{ env.COMMON_RUN_CITIES_OPTIONS }} \
          -i $GITHUB_WORKSPACE/skipped.txt \
          -r $GITHUB_WORKSPACE/build/cts_refsi_g1_wi.xml
        ninja -C build check-ock
        ninja -C build check-ock-UnitCL-half

 # Based on: mr-run-ubuntu-gcc-x86_64-refsi-tutorial-end:
  run-ubuntu-gcc-x86_64-refsi-tutorial-end:
    #if: contains(inputs.target_list, 'host_refsi_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_refsi_tutorial

 # Based on: mr-run-ubuntu-gcc-x86_64-refsi-tutorial-start:
  run-ubuntu-gcc-x86_64-refsi-tutorial-start:
    #if: contains(inputs.target_list, 'host_refsi_linux')
    if: false
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/uxlfoundation/ock_ubuntu_22.04-x86-64:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
    timeout-minutes: 60
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: setup-ubuntu
      uses: ./.github/actions/setup_build
      with:
        llvm_version: ${{ inputs.llvm_current }}
        llvm_source: ${{ inputs.llvm_source}}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: build ock
      uses: ./.github/actions/do_build_pr/run_ubuntu_gcc_x86_64_refsi_tutorial
      with:
        setup_new_target_params: ''
        tutorial_point: start
