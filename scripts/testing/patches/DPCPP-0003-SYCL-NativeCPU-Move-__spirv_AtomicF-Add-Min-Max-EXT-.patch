From 6e8701e7bc39a61ed60848702faf53fea91f5e04 Mon Sep 17 00:00:00 2001
From: Harald van Dijk <harald.vandijk@codeplay.com>
Date: Wed, 2 Apr 2025 15:12:26 +0100
Subject: [PATCH] [SYCL][NativeCPU] Move __spirv_AtomicF{Add,Min,Max}EXT into
 libclc.

---
 libclc/libspirv/lib/native_cpu/SOURCES        |  3 ++
 .../lib/native_cpu/atomic/atomic_add.ll       | 35 +++++++++++++
 .../lib/native_cpu/atomic/atomic_max.ll       | 35 +++++++++++++
 .../lib/native_cpu/atomic/atomic_min.ll       | 35 +++++++++++++
 .../llvm/SYCLLowerIR/FAtomicsNativeCPU.h      | 28 ----------
 llvm/lib/SYCLNativeCPUUtils/CMakeLists.txt    |  1 -
 .../SYCLNativeCPUUtils/FAtomicsNativeCPU.cpp  | 51 -------------------
 .../PipelineSYCLNativeCPU.cpp                 |  2 -
 .../native_cpu/fp_atomic.cpp                  | 41 ---------------
 9 files changed, 108 insertions(+), 123 deletions(-)
 create mode 100644 libclc/libspirv/lib/native_cpu/atomic/atomic_add.ll
 create mode 100644 libclc/libspirv/lib/native_cpu/atomic/atomic_max.ll
 create mode 100644 libclc/libspirv/lib/native_cpu/atomic/atomic_min.ll
 delete mode 100644 llvm/include/llvm/SYCLLowerIR/FAtomicsNativeCPU.h
 delete mode 100644 llvm/lib/SYCLNativeCPUUtils/FAtomicsNativeCPU.cpp
 delete mode 100644 sycl/test/check_device_code/native_cpu/fp_atomic.cpp

diff --git a/libclc/libspirv/lib/native_cpu/SOURCES b/libclc/libspirv/lib/native_cpu/SOURCES
index 445f4a053b1e..cdb82ef1b0de 100644
--- a/libclc/libspirv/lib/native_cpu/SOURCES
+++ b/libclc/libspirv/lib/native_cpu/SOURCES
@@ -11,6 +11,9 @@ math/native_log2.cl
 math/native_sin.cl
 math/native_sqrt.cl
 math/round.cl
+atomic/atomic_add.ll
+atomic/atomic_max.ll
+atomic/atomic_min.ll
 workitem/get_global_id.cl
 workitem/get_global_size.cl
 workitem/get_num_sub_groups.cl
diff --git a/libclc/libspirv/lib/native_cpu/atomic/atomic_add.ll b/libclc/libspirv/lib/native_cpu/atomic/atomic_add.ll
new file mode 100644
index 000000000000..88e52c944a0c
--- /dev/null
+++ b/libclc/libspirv/lib/native_cpu/atomic/atomic_add.ll
@@ -0,0 +1,35 @@
+define float @_Z21__spirv_AtomicFAddEXTPfN5__spv5Scope4FlagENS0_19MemorySemanticsMask4FlagEf(ptr noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fadd ptr %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define float @_Z21__spirv_AtomicFAddEXTPU3AS1fN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEf(ptr addrspace(1) noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fadd ptr addrspace(1) %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define float @_Z21__spirv_AtomicFAddEXTPU3AS3fN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEf(ptr addrspace(3) noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fadd ptr addrspace(3) %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define double @_Z21__spirv_AtomicFAddEXTPdN5__spv5Scope4FlagENS0_19MemorySemanticsMask4FlagEd(ptr noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fadd ptr %p, double %val seq_cst, align 8
+  ret double %0
+}
+
+define double @_Z21__spirv_AtomicFAddEXTPU3AS1dN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEd(ptr addrspace(1) noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fadd ptr addrspace(1) %p, double %val seq_cst, align 8
+  ret double %0
+}
+
+define double @_Z21__spirv_AtomicFAddEXTPU3AS3dN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEd(ptr addrspace(3) noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fadd ptr addrspace(3) %p, double %val seq_cst, align 8
+  ret double %0
+}
diff --git a/libclc/libspirv/lib/native_cpu/atomic/atomic_max.ll b/libclc/libspirv/lib/native_cpu/atomic/atomic_max.ll
new file mode 100644
index 000000000000..16ebebf14318
--- /dev/null
+++ b/libclc/libspirv/lib/native_cpu/atomic/atomic_max.ll
@@ -0,0 +1,35 @@
+define float @_Z21__spirv_AtomicFMaxEXTPfN5__spv5Scope4FlagENS0_19MemorySemanticsMask4FlagEf(ptr noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmax ptr %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define float @_Z21__spirv_AtomicFMaxEXTPU3AS1fN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEf(ptr addrspace(1) noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmax ptr addrspace(1) %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define float @_Z21__spirv_AtomicFMaxEXTPU3AS3fN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEf(ptr addrspace(3) noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmax ptr addrspace(3) %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define double @_Z21__spirv_AtomicFMaxEXTPdN5__spv5Scope4FlagENS0_19MemorySemanticsMask4FlagEd(ptr noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmax ptr %p, double %val seq_cst, align 8
+  ret double %0
+}
+
+define double @_Z21__spirv_AtomicFMaxEXTPU3AS1dN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEd(ptr addrspace(1) noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmax ptr addrspace(1) %p, double %val seq_cst, align 8
+  ret double %0
+}
+
+define double @_Z21__spirv_AtomicFMaxEXTPU3AS3dN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEd(ptr addrspace(3) noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmax ptr addrspace(3) %p, double %val seq_cst, align 8
+  ret double %0
+}
diff --git a/libclc/libspirv/lib/native_cpu/atomic/atomic_min.ll b/libclc/libspirv/lib/native_cpu/atomic/atomic_min.ll
new file mode 100644
index 000000000000..2dbe8330b263
--- /dev/null
+++ b/libclc/libspirv/lib/native_cpu/atomic/atomic_min.ll
@@ -0,0 +1,35 @@
+define float @_Z21__spirv_AtomicFMinEXTPfN5__spv5Scope4FlagENS0_19MemorySemanticsMask4FlagEf(ptr noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmin ptr %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define float @_Z21__spirv_AtomicFMinEXTPU3AS1fN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEf(ptr addrspace(1) noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmin ptr addrspace(1) %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define float @_Z21__spirv_AtomicFMinEXTPU3AS3fN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEf(ptr addrspace(3) noundef %p, i32 noundef %scope, i32 noundef %semantics, float noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmin ptr addrspace(3) %p, float %val seq_cst, align 4
+  ret float %0
+}
+
+define double @_Z21__spirv_AtomicFMinEXTPdN5__spv5Scope4FlagENS0_19MemorySemanticsMask4FlagEd(ptr noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmin ptr %p, double %val seq_cst, align 8
+  ret double %0
+}
+
+define double @_Z21__spirv_AtomicFMinEXTPU3AS1dN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEd(ptr addrspace(1) noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmin ptr addrspace(1) %p, double %val seq_cst, align 8
+  ret double %0
+}
+
+define double @_Z21__spirv_AtomicFMinEXTPU3AS3dN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEd(ptr addrspace(3) noundef %p, i32 noundef %scope, i32 noundef %semantics, double noundef %val) nounwind alwaysinline {
+entry:
+  %0 = atomicrmw fmin ptr addrspace(3) %p, double %val seq_cst, align 8
+  ret double %0
+}
diff --git a/llvm/include/llvm/SYCLLowerIR/FAtomicsNativeCPU.h b/llvm/include/llvm/SYCLLowerIR/FAtomicsNativeCPU.h
deleted file mode 100644
index dbe22c62b56f..000000000000
--- a/llvm/include/llvm/SYCLLowerIR/FAtomicsNativeCPU.h
+++ /dev/null
@@ -1,28 +0,0 @@
-//===------- FAtomicsNativeCPU.h - Materializes FP Atomics ----------------===//
-//
-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
-// See https://llvm.org/LICENSE.txt for license information.
-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-//
-//===----------------------------------------------------------------------===//
-//
-// A transformation pass that materializes floating points atomics by emitting
-// corresponding atomicrmw instruction.
-//
-//===----------------------------------------------------------------------===//
-
-#pragma once
-
-#include "llvm/IR/Module.h"
-#include "llvm/IR/PassManager.h"
-
-namespace llvm {
-
-class ModulePass;
-
-class FAtomicsNativeCPU : public PassInfoMixin<FAtomicsNativeCPU> {
-public:
-  PreservedAnalyses run(Module &M, ModuleAnalysisManager &MAM);
-};
-
-} // namespace llvm
diff --git a/llvm/lib/SYCLNativeCPUUtils/CMakeLists.txt b/llvm/lib/SYCLNativeCPUUtils/CMakeLists.txt
index f176fcb48e16..ebab0df795fa 100644
--- a/llvm/lib/SYCLNativeCPUUtils/CMakeLists.txt
+++ b/llvm/lib/SYCLNativeCPUUtils/CMakeLists.txt
@@ -3,7 +3,6 @@ add_llvm_component_library(LLVMSYCLNativeCPUUtils
   PrepareSYCLNativeCPU.cpp
   RenameKernelSYCLNativeCPU.cpp
   ConvertToMuxBuiltinsSYCLNativeCPU.cpp
-  FAtomicsNativeCPU.cpp
 
   ADDITIONAL_HEADER_DIRS
   ${LLVM_MAIN_INCLUDE_DIR}/llvm/SYCLLowerIR
diff --git a/llvm/lib/SYCLNativeCPUUtils/FAtomicsNativeCPU.cpp b/llvm/lib/SYCLNativeCPUUtils/FAtomicsNativeCPU.cpp
deleted file mode 100644
index a81a74d48f56..000000000000
--- a/llvm/lib/SYCLNativeCPUUtils/FAtomicsNativeCPU.cpp
+++ /dev/null
@@ -1,51 +0,0 @@
-//===------- FAtomicsNativeCPU.cpp - Materializes FP Atomics --------------===//
-//
-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
-// See https://llvm.org/LICENSE.txt for license information.
-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-//
-//===----------------------------------------------------------------------===//
-//
-// A transformation pass that materializes floating points atomics by emitting
-// corresponding atomicrmw instruction.
-//
-//===----------------------------------------------------------------------===//
-
-#include "llvm/SYCLLowerIR/FAtomicsNativeCPU.h"
-#include "llvm/IR/IRBuilder.h"
-#include "llvm/IR/Instructions.h"
-#include "llvm/IR/LLVMContext.h"
-#include "llvm/Support/Alignment.h"
-#include "llvm/Support/AtomicOrdering.h"
-
-using namespace llvm;
-
-PreservedAnalyses FAtomicsNativeCPU::run(Module &M,
-                                         ModuleAnalysisManager &MAM) {
-  bool ModuleChanged = false;
-  auto &Ctx = M.getContext();
-  // TODO: add checks for windows mangling
-  for (auto &F : M) {
-    AtomicRMWInst::BinOp OpCode;
-    if (F.getName().starts_with("_Z21__spirv_AtomicFAddEXT")) {
-      OpCode = AtomicRMWInst::BinOp::FAdd;
-    } else if (F.getName().starts_with("_Z21__spirv_AtomicFMinEXT")) {
-      OpCode = AtomicRMWInst::BinOp::FMin;
-    } else if (F.getName().starts_with("_Z21__spirv_AtomicFMaxEXT")) {
-      OpCode = AtomicRMWInst::BinOp::FMax;
-    } else {
-      continue;
-    }
-
-    ModuleChanged = true;
-    BasicBlock *BB = BasicBlock::Create(Ctx, "entry", &F);
-    IRBuilder<> Builder(BB);
-    // Currently we drop arguments 1 and 2 (scope and memory ordering),
-    // defaulting to Monotonic ordering and System scope.
-    auto A =
-        Builder.CreateAtomicRMW(OpCode, F.getArg(0), F.getArg(3), MaybeAlign(),
-                                AtomicOrdering::Monotonic, SyncScope::System);
-    Builder.CreateRet(A);
-  }
-  return ModuleChanged ? PreservedAnalyses::none() : PreservedAnalyses::all();
-}
diff --git a/llvm/lib/SYCLNativeCPUUtils/PipelineSYCLNativeCPU.cpp b/llvm/lib/SYCLNativeCPUUtils/PipelineSYCLNativeCPU.cpp
index f36d29da74b6..5bb4a997c39b 100644
--- a/llvm/lib/SYCLNativeCPUUtils/PipelineSYCLNativeCPU.cpp
+++ b/llvm/lib/SYCLNativeCPUUtils/PipelineSYCLNativeCPU.cpp
@@ -12,7 +12,6 @@
 //
 //===----------------------------------------------------------------------===//
 #include "llvm/SYCLLowerIR/ConvertToMuxBuiltinsSYCLNativeCPU.h"
-#include "llvm/SYCLLowerIR/FAtomicsNativeCPU.h"
 #include "llvm/SYCLLowerIR/PrepareSYCLNativeCPU.h"
 #include "llvm/SYCLLowerIR/RenameKernelSYCLNativeCPU.h"
 #include "llvm/SYCLLowerIR/SpecConstants.h"
@@ -70,7 +69,6 @@ void llvm::sycl::utils::addSYCLNativeCPUBackendPasses(
     OptimizationLevel OptLevel) {
   MPM.addPass(SpecConstantsPass(SpecConstantsPass::HandlingMode::emulation));
   MPM.addPass(ConvertToMuxBuiltinsSYCLNativeCPUPass());
-  MPM.addPass(FAtomicsNativeCPU());
 #ifdef NATIVECPU_USE_OCK
   MPM.addPass(compiler::utils::PrepareBarriersPass());
   MPM.addPass(compiler::utils::TransferKernelMetadataPass());
diff --git a/sycl/test/check_device_code/native_cpu/fp_atomic.cpp b/sycl/test/check_device_code/native_cpu/fp_atomic.cpp
deleted file mode 100644
index d1abd7ec13f1..000000000000
--- a/sycl/test/check_device_code/native_cpu/fp_atomic.cpp
+++ /dev/null
@@ -1,41 +0,0 @@
-// REQUIRES: linux
-// RUN: %clangxx -fsycl-device-only  -fsycl-targets=native_cpu -S -emit-llvm  -o %t_temp.ll %s
-// RUN: %clangxx -mllvm -sycl-native-cpu-backend -S -emit-llvm -o - %t_temp.ll | FileCheck %s
-#include <sycl/sycl.hpp>
-
-constexpr sycl::memory_order order = sycl::memory_order::relaxed;
-constexpr sycl::memory_scope scope = sycl::memory_scope::work_group;
-constexpr sycl::access::address_space space =
-    sycl::access::address_space::global_space;
-
-class Test;
-using namespace sycl;
-int main() {
-  queue q;
-  const size_t N = 32;
-  float sum = 0;
-  std::vector<float> output(N);
-  std::fill(output.begin(), output.end(), 0.f);
-  {
-    buffer<float> sum_buf(&sum, 1);
-    q.submit([&](handler &cgh) {
-       auto sum = sum_buf.template get_access<access::mode::read_write>(cgh);
-       cgh.parallel_for<Test>(range<1>(N), [=](item<1> it) {
-         int gid = it.get_id(0);
-         auto atm = atomic_ref<float, order, scope, space>(sum[0]);
-         atm.fetch_add(1.f, order);
-         //CHECK-DAG: float @_Z21__spirv_AtomicFAddEXT{{.*}}(ptr {{.*}} %[[ARG0:.*]], i32 {{.*}}, i32 {{.*}}, float {{.*}} %[[ARG3:.*]])
-         //CHECK:   %[[RES:.*]] = atomicrmw fadd ptr addrspace(1) %[[ARG0]], float %[[ARG3]] monotonic, align 4
-         //CHECK:   ret float %[[RES]]
-         atm.fetch_max(1.f, order);
-         //CHECK-DAG: float @_Z21__spirv_AtomicFMaxEXT{{.*}}(ptr {{.*}} %[[ARG0:.*]], i32 {{.*}}, i32 {{.*}}, float {{.*}} %[[ARG3:.*]])
-         //CHECK:   %[[RES:.*]] = atomicrmw fmax ptr addrspace(1) %[[ARG0]], float %[[ARG3]] monotonic, align 4
-         //CHECK:   ret float %[[RES]]
-         atm.fetch_min(1.f, order);
-         //CHECK-DAG: float @_Z21__spirv_AtomicFMinEXT{{.*}}(ptr {{.*}} %[[ARG0:.*]], i32 {{.*}}, i32 {{.*}}, float {{.*}} %[[ARG3:.*]])
-         //CHECK:   %[[RES:.*]] = atomicrmw fmin ptr addrspace(1) %[[ARG0]], float %[[ARG3]] monotonic, align 4
-         //CHECK:   ret float %[[RES]]
-       });
-     }).wait_and_throw();
-  }
-}
-- 
2.48.1

