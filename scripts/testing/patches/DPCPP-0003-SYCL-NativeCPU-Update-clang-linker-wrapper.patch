From 2212c0264dca81442f38f3079494f517167079ee Mon Sep 17 00:00:00 2001
From: Harald van Dijk <harald.vandijk@codeplay.com>
Date: Wed, 9 Apr 2025 17:11:39 +0100
Subject: [PATCH] [SYCL][NativeCPU] Update clang-linker-wrapper.

The current support for NativeCPU in clang-linker-wrapper had not been
maintained; this commit updates it to work again, simplifies things, and
fixes handling of specialization constants.
---
 .../ClangLinkerWrapper.cpp                    | 135 ++++++++++++------
 .../Offloading/SYCLOffloadWrapper.cpp         |   9 +-
 sycl/test/native_cpu/atomic-base.cpp          |   3 +
 sycl/test/native_cpu/multiple_tu.cpp          |   7 +
 sycl/test/native_cpu/vector-add.cpp           |   4 +
 5 files changed, 107 insertions(+), 51 deletions(-)

diff --git a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index a4d2030fb648..074f686fd660 100644
--- a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -673,9 +673,8 @@ getTripleBasedSYCLPostLinkOpts(const ArgList &Args,
   // because it only increases amount of code for device compiler to handle,
   // without any actual benefits.
   // TODO: Try to extend this feature for non-Intel GPUs.
-  if ((!Args.hasFlag(OPT_no_sycl_remove_unused_external_funcs,
-                     OPT_sycl_remove_unused_external_funcs, false) &&
-       !SYCLNativeCPU) &&
+  if (!Args.hasFlag(OPT_no_sycl_remove_unused_external_funcs,
+                    OPT_sycl_remove_unused_external_funcs, false) &&
       !Args.hasArg(OPT_sycl_allow_device_image_dependencies) &&
       !Triple.isNVPTX() && !Triple.isAMDGPU())
     PostLinkArgs.push_back("-emit-only-kernels-as-entry-points");
@@ -1554,7 +1553,7 @@ Error extractBundledObjects(StringRef Filename, const ArgList &Args,
 
 namespace generic {
 Expected<StringRef> clang(ArrayRef<StringRef> InputFiles, const ArgList &Args,
-                          bool IsSYCLKind = false) {
+                          bool IsSYCLKind = false, bool SYCLNativeCPU = false) {
   llvm::TimeTraceScope TimeScope("Clang");
   // Use `clang` to invoke the appropriate device tools.
   Expected<std::string> ClangPath =
@@ -1563,7 +1562,7 @@ Expected<StringRef> clang(ArrayRef<StringRef> InputFiles, const ArgList &Args,
     return ClangPath.takeError();
 
   llvm::Triple Triple(Args.getLastArgValue(OPT_triple_EQ));
-  if (Triple.str() == "native_cpu")
+  if (SYCLNativeCPU)
     Triple = llvm::Triple(Args.getLastArgValue(OPT_host_triple_EQ));
 
   StringRef Arch = Args.getLastArgValue(OPT_arch_EQ);
@@ -1598,16 +1597,24 @@ Expected<StringRef> clang(ArrayRef<StringRef> InputFiles, const ArgList &Args,
         {"-Xlinker",
          Args.MakeArgString("--plugin-opt=" + StringRef(Arg->getValue()))});
 
-  if (!Triple.isNVPTX() && !Triple.isSPIRV())
+  if (!Triple.isNVPTX() && !Triple.isSPIRV() && !SYCLNativeCPU)
     CmdArgs.push_back("-Wl,--no-undefined");
 
   if (IsSYCLKind && Triple.isNVPTX())
     CmdArgs.push_back("-S");
+
+  if (IsSYCLKind && SYCLNativeCPU) {
+    CmdArgs.push_back("-Wno-override-module");
+    CmdArgs.push_back("-mllvm");
+    CmdArgs.push_back("-sycl-native-cpu-backend");
+    CmdArgs.push_back("-c");
+  }
+
   for (StringRef InputFile : InputFiles)
     CmdArgs.push_back(InputFile);
 
   // If this is CPU offloading we copy the input libraries.
-  if (!Triple.isGPU()) {
+  if (!Triple.isGPU() && !SYCLNativeCPU) {
     CmdArgs.push_back("-Wl,-Bsymbolic");
     CmdArgs.push_back("-shared");
     ArgStringList LinkerArgs;
@@ -1660,6 +1667,38 @@ Expected<StringRef> clang(ArrayRef<StringRef> InputFiles, const ArgList &Args,
                       Args.MakeArgString(Arg.split('=').second)});
   }
 
+  // link NativeCPU utils lib if needed
+  if (SYCLNativeCPU) {
+    if (auto *A = Args.getLastArg(OPT_sycl_device_library_location_EQ)) {
+      std::string NativeCPUUtilsLib = "";
+
+      SmallVector<std::string, 8> LibraryPaths;
+      for (const auto &Path : A->getValues()) {
+        SmallString<128> LPath(Path);
+        if (llvm::sys::fs::exists(LPath)) {
+          LibraryPaths.emplace_back(LPath);
+        }
+      }
+
+      for (auto &LPath : LibraryPaths) {
+        // Call llvm-link without --only-needed to link to the nativecpu_utils
+        // lib
+        const char LibNativeCPUUtilsName[] = "libsycl-nativecpu_utils.bc";
+        SmallString<128> LibNativeCPUUtilsPath(LPath);
+        llvm::sys::path::append(LibNativeCPUUtilsPath, LibNativeCPUUtilsName);
+        if (llvm::sys::fs::exists(LibNativeCPUUtilsPath)) {
+          NativeCPUUtilsLib = LibNativeCPUUtilsPath.str();
+          break;
+        }
+      }
+
+      if (NativeCPUUtilsLib != "") {
+        CmdArgs.append({"-Xclang", "-mlink-bitcode-file", "-Xclang",
+                        Args.MakeArgString(NativeCPUUtilsLib)});
+      }
+    }
+  }
+
   // The OpenMPOpt pass can introduce new calls and is expensive, we do
   // not want this when running CodeGen through clang.
   if (Args.hasArg(OPT_clang_backend) || Args.hasArg(OPT_builtin_bitcode_EQ))
@@ -1718,9 +1757,6 @@ Expected<StringRef> linkDevice(ArrayRef<StringRef> InputFiles,
   case Triple::loongarch64:
     return generic::clang(InputFiles, Args, IsSYCLKind);
   default:
-    if (Triple.str() == "native_cpu" && IsSYCLKind)
-      return generic::clang(InputFiles, Args);
-
     return createStringError(Triple.getArchName() +
                              " linking is not supported");
   }
@@ -2099,39 +2135,52 @@ Expected<SmallVector<StringRef>> linkAndWrapDeviceFiles(
           return OutputFile.takeError();
         WrappedOutput.push_back(*OutputFile);
       }
-      for (size_t I = 0, E = SplitModules.size(); I != E; ++I) {
-        SmallVector<StringRef> Files = {SplitModules[I].ModuleFilePath};
-        StringRef Arch = LinkerArgs.getLastArgValue(OPT_arch_EQ);
-        if (Arch.empty())
-          Arch = "native";
-        SmallVector<std::pair<StringRef, StringRef>, 4> BundlerInputFiles;
-        auto ClangOutputOrErr =
-            linkDevice(Files, LinkerArgs, true /* IsSYCLKind */);
-        if (!ClangOutputOrErr)
-          return ClangOutputOrErr.takeError();
-        if (Triple.isNVPTX()) {
-          auto VirtualArch = StringRef(clang::OffloadArchToVirtualArchString(
-              clang::StringToOffloadArch(Arch)));
-          auto PtxasOutputOrErr =
-              nvptx::ptxas(*ClangOutputOrErr, LinkerArgs, Arch);
-          if (!PtxasOutputOrErr)
-            return PtxasOutputOrErr.takeError();
-          BundlerInputFiles.emplace_back(*ClangOutputOrErr, VirtualArch);
-          BundlerInputFiles.emplace_back(*PtxasOutputOrErr, Arch);
-          auto BundledFileOrErr =
-              nvptx::fatbinary(BundlerInputFiles, LinkerArgs);
-          if (!BundledFileOrErr)
-            return BundledFileOrErr.takeError();
-          SplitModules[I].ModuleFilePath = *BundledFileOrErr;
-        } else if (Triple.isAMDGCN()) {
-          BundlerInputFiles.emplace_back(*ClangOutputOrErr, Arch);
-          auto BundledFileOrErr =
-              amdgcn::fatbinary(BundlerInputFiles, LinkerArgs);
-          if (!BundledFileOrErr)
-            return BundledFileOrErr.takeError();
-          SplitModules[I].ModuleFilePath = *BundledFileOrErr;
-        } else {
-          SplitModules[I].ModuleFilePath = *ClangOutputOrErr;
+      if (Triple.str() == "native_cpu") {
+        for (size_t I = 0, E = SplitModules.size(); I != E; ++I) {
+          SmallVector<StringRef> Files = {SplitModules[I].ModuleFilePath};
+          auto ClangOutputOrErr =
+              generic::clang(Files, Args, /*IsSYCLKind=*/true,
+                             /*SYCLNativeCPU=*/true);
+          if (!ClangOutputOrErr)
+            return ClangOutputOrErr.takeError();
+          std::scoped_lock Guard(ImageMtx);
+          WrappedOutput.push_back(*ClangOutputOrErr);
+        }
+      } else {
+        for (size_t I = 0, E = SplitModules.size(); I != E; ++I) {
+          SmallVector<StringRef> Files = {SplitModules[I].ModuleFilePath};
+          StringRef Arch = LinkerArgs.getLastArgValue(OPT_arch_EQ);
+          if (Arch.empty())
+            Arch = "native";
+          SmallVector<std::pair<StringRef, StringRef>, 4> BundlerInputFiles;
+          auto ClangOutputOrErr =
+              linkDevice(Files, LinkerArgs, true /* IsSYCLKind */);
+          if (!ClangOutputOrErr)
+            return ClangOutputOrErr.takeError();
+          if (Triple.isNVPTX()) {
+            auto VirtualArch = StringRef(clang::OffloadArchToVirtualArchString(
+                clang::StringToOffloadArch(Arch)));
+            auto PtxasOutputOrErr =
+                nvptx::ptxas(*ClangOutputOrErr, LinkerArgs, Arch);
+            if (!PtxasOutputOrErr)
+              return PtxasOutputOrErr.takeError();
+            BundlerInputFiles.emplace_back(*ClangOutputOrErr, VirtualArch);
+            BundlerInputFiles.emplace_back(*PtxasOutputOrErr, Arch);
+            auto BundledFileOrErr =
+                nvptx::fatbinary(BundlerInputFiles, LinkerArgs);
+            if (!BundledFileOrErr)
+              return BundledFileOrErr.takeError();
+            SplitModules[I].ModuleFilePath = *BundledFileOrErr;
+          } else if (Triple.isAMDGCN()) {
+            BundlerInputFiles.emplace_back(*ClangOutputOrErr, Arch);
+            auto BundledFileOrErr =
+                amdgcn::fatbinary(BundlerInputFiles, LinkerArgs);
+            if (!BundledFileOrErr)
+              return BundledFileOrErr.takeError();
+            SplitModules[I].ModuleFilePath = *BundledFileOrErr;
+          } else {
+            SplitModules[I].ModuleFilePath = *ClangOutputOrErr;
+          }
         }
       }
 
diff --git a/llvm/lib/Frontend/Offloading/SYCLOffloadWrapper.cpp b/llvm/lib/Frontend/Offloading/SYCLOffloadWrapper.cpp
index 3d227d0c2e05..da05e34cac19 100644
--- a/llvm/lib/Frontend/Offloading/SYCLOffloadWrapper.cpp
+++ b/llvm/lib/Frontend/Offloading/SYCLOffloadWrapper.cpp
@@ -221,15 +221,8 @@ struct Wrapper {
     FunctionType *NativeCPUFuncTy = FunctionType::get(
         Type::getVoidTy(C),
         {PointerType::getUnqual(C), PointerType::getUnqual(C)}, false);
-    FunctionType *NativeCPUBuiltinTy = FunctionType::get(
-        PointerType::getUnqual(C), {PointerType::getUnqual(C)}, false);
-    FunctionType *FTy;
-    if (Name.starts_with("__dpcpp_nativecpu"))
-      FTy = NativeCPUBuiltinTy;
-    else
-      FTy = NativeCPUFuncTy;
     auto FCalle = M.getOrInsertFunction(
-        sycl::utils::addSYCLNativeCPUSuffix(Name).str(), FTy);
+        sycl::utils::addSYCLNativeCPUSuffix(Name).str(), NativeCPUFuncTy);
     Function *F = dyn_cast<Function>(FCalle.getCallee());
     if (F == nullptr)
       report_fatal_error("Unexpected callee");
diff --git a/sycl/test/native_cpu/atomic-base.cpp b/sycl/test/native_cpu/atomic-base.cpp
index ee84a90c8a89..15deb2e27564 100644
--- a/sycl/test/native_cpu/atomic-base.cpp
+++ b/sycl/test/native_cpu/atomic-base.cpp
@@ -4,6 +4,9 @@
 // RUN: %clangxx -fsycl -fsycl-targets=native_cpu %s -o %t
 // RUN: env ONEAPI_DEVICE_SELECTOR="native_cpu:cpu" %t
 
+// RUN: %clangxx -fsycl -fsycl-targets=native_cpu %s -o %t-new --offload-new-driver
+// RUN: env ONEAPI_DEVICE_SELECTOR="native_cpu:cpu" %t-new
+
 #include <sycl/sycl.hpp>
 #include <vector>
 
diff --git a/sycl/test/native_cpu/multiple_tu.cpp b/sycl/test/native_cpu/multiple_tu.cpp
index b4d5338dc0f4..2162f4605c38 100644
--- a/sycl/test/native_cpu/multiple_tu.cpp
+++ b/sycl/test/native_cpu/multiple_tu.cpp
@@ -12,6 +12,13 @@
 //RUN: %clangxx -fsycl -fsycl-targets=native_cpu -g %t_plusone-debug.o %t_main-debug.o %t_init-debug.o -o %t-debug
 //RUN: env ONEAPI_DEVICE_SELECTOR=native_cpu:cpu %t-debug
 
+// New offload driver
+//RUN: %clangxx -fsycl -fsycl-targets=native_cpu --offload-new-driver %s -c -o %t_main-new_offload.o
+//RUN: %clangxx -fsycl -fsycl-targets=native_cpu --offload-new-driver %S/Inputs/init.cpp -c -o %t_init-new_offload.o
+//RUN: %clangxx -fsycl -fsycl-targets=native_cpu --offload-new-driver %S/Inputs/plusone.cpp -c -o %t_plusone-new_offload.o
+//RUN: %clangxx -fsycl -fsycl-targets=native_cpu --offload-new-driver %t_plusone-new_offload.o %t_main-new_offload.o %t_init-new_offload.o -o %t-new_offload
+//RUN: env ONEAPI_DEVICE_SELECTOR=native_cpu:cpu %t-new_offload
+
 #include "Inputs/common.h"
 #include <iostream>
 
diff --git a/sycl/test/native_cpu/vector-add.cpp b/sycl/test/native_cpu/vector-add.cpp
index e9aecbd00af8..30b03725c69f 100644
--- a/sycl/test/native_cpu/vector-add.cpp
+++ b/sycl/test/native_cpu/vector-add.cpp
@@ -22,6 +22,10 @@
 // verify the (profiling) outputs.
 // RUN: %clangxx -fsycl -fsycl-targets=native_cpu %s -fprofile-instr-generate -fcoverage-mapping -mllvm -system-headers-coverage -c -o %t
 
+// Use new offload driver
+// RUN: %clangxx -fsycl -fsycl-targets=native_cpu %s -o %t-new --offload-new-driver
+// RUN: env ONEAPI_DEVICE_SELECTOR="native_cpu:cpu" %t-new
+
 #include <sycl/sycl.hpp>
 
 #include <array>
-- 
2.47.2

