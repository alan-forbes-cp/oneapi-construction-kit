// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// WARNING: This file is generated by a script, do not edit it directly. Instead
// changes should be made to the generate_header.sh script in builtins/scripts.

#include <builtins/builtins.h>
#define ABACUS_ENABLE_OPENCL_1_2_BUILTINS
#include <builtins/clbuiltins.h>
#undef ABACUS_ENABLE_OPENCL_1_2_BUILTINS
#ifdef __cplusplus
extern "C" {
#endif

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

char __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char(uchar arg) {
  return __builtin_astype(arg, char);
}
uchar __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar(char arg) {
  return __builtin_astype(arg, uchar);
}
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(
    uchar2 arg) {
  return __builtin_astype(arg, char2);
}
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(short arg) {
  return __builtin_astype(arg, char2);
}
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(
    ushort arg) {
  return __builtin_astype(arg, char2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(half arg) {
  return __builtin_astype(arg, char2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar2(
    char2 arg) {
  return __builtin_astype(arg, uchar2);
}
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar2(
    short arg) {
  return __builtin_astype(arg, uchar2);
}
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar2(
    ushort arg) {
  return __builtin_astype(arg, uchar2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar2(
    half arg) {
  return __builtin_astype(arg, uchar2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(char2 arg) {
  return __builtin_astype(arg, short);
}
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(
    uchar2 arg) {
  return __builtin_astype(arg, short);
}
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(
    ushort arg) {
  return __builtin_astype(arg, short);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(half arg) {
  return __builtin_astype(arg, short);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort(
    char2 arg) {
  return __builtin_astype(arg, ushort);
}
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort(
    uchar2 arg) {
  return __builtin_astype(arg, ushort);
}
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort(
    short arg) {
  return __builtin_astype(arg, ushort);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort(
    half arg) {
  return __builtin_astype(arg, ushort);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(char2 arg) {
  return __builtin_astype(arg, half);
}
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(uchar2 arg) {
  return __builtin_astype(arg, half);
}
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(short arg) {
  return __builtin_astype(arg, half);
}
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(ushort arg) {
  return __builtin_astype(arg, half);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(
    uchar4 arg) {
  return __builtin_astype(arg, char4);
}
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(
    short2 arg) {
  return __builtin_astype(arg, char4);
}
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(
    ushort2 arg) {
  return __builtin_astype(arg, char4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(half2 arg) {
  return __builtin_astype(arg, char4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(int arg) {
  return __builtin_astype(arg, char4);
}
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(uint arg) {
  return __builtin_astype(arg, char4);
}
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(float arg) {
  return __builtin_astype(arg, char4);
}
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    char4 arg) {
  return __builtin_astype(arg, uchar4);
}
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    short2 arg) {
  return __builtin_astype(arg, uchar4);
}
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    ushort2 arg) {
  return __builtin_astype(arg, uchar4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    half2 arg) {
  return __builtin_astype(arg, uchar4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(int arg) {
  return __builtin_astype(arg, uchar4);
}
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    uint arg) {
  return __builtin_astype(arg, uchar4);
}
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    float arg) {
  return __builtin_astype(arg, uchar4);
}
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(
    char4 arg) {
  return __builtin_astype(arg, short2);
}
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(
    uchar4 arg) {
  return __builtin_astype(arg, short2);
}
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(
    ushort2 arg) {
  return __builtin_astype(arg, short2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(
    half2 arg) {
  return __builtin_astype(arg, short2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(int arg) {
  return __builtin_astype(arg, short2);
}
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(
    uint arg) {
  return __builtin_astype(arg, short2);
}
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(
    float arg) {
  return __builtin_astype(arg, short2);
}
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort2(
    char4 arg) {
  return __builtin_astype(arg, ushort2);
}
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort2(
    uchar4 arg) {
  return __builtin_astype(arg, ushort2);
}
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort2(
    short2 arg) {
  return __builtin_astype(arg, ushort2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort2(
    half2 arg) {
  return __builtin_astype(arg, ushort2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort2(
    int arg) {
  return __builtin_astype(arg, ushort2);
}
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort2(
    uint arg) {
  return __builtin_astype(arg, ushort2);
}
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort2(
    float arg) {
  return __builtin_astype(arg, ushort2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(char4 arg) {
  return __builtin_astype(arg, half2);
}
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(
    uchar4 arg) {
  return __builtin_astype(arg, half2);
}
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(
    short2 arg) {
  return __builtin_astype(arg, half2);
}
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(
    ushort2 arg) {
  return __builtin_astype(arg, half2);
}
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(int arg) {
  return __builtin_astype(arg, half2);
}
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(uint arg) {
  return __builtin_astype(arg, half2);
}
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(float arg) {
  return __builtin_astype(arg, half2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(char4 arg) {
  return __builtin_astype(arg, int);
}
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(uchar4 arg) {
  return __builtin_astype(arg, int);
}
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(short2 arg) {
  return __builtin_astype(arg, int);
}
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(ushort2 arg) {
  return __builtin_astype(arg, int);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(half2 arg) {
  return __builtin_astype(arg, int);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(uint arg) {
  return __builtin_astype(arg, int);
}
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(float arg) {
  return __builtin_astype(arg, int);
}
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(char4 arg) {
  return __builtin_astype(arg, uint);
}
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(uchar4 arg) {
  return __builtin_astype(arg, uint);
}
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(short2 arg) {
  return __builtin_astype(arg, uint);
}
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(ushort2 arg) {
  return __builtin_astype(arg, uint);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(half2 arg) {
  return __builtin_astype(arg, uint);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(int arg) {
  return __builtin_astype(arg, uint);
}
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(float arg) {
  return __builtin_astype(arg, uint);
}
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(char4 arg) {
  return __builtin_astype(arg, float);
}
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(
    uchar4 arg) {
  return __builtin_astype(arg, float);
}
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(
    short2 arg) {
  return __builtin_astype(arg, float);
}
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(
    ushort2 arg) {
  return __builtin_astype(arg, float);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(half2 arg) {
  return __builtin_astype(arg, float);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(int arg) {
  return __builtin_astype(arg, float);
}
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(uint arg) {
  return __builtin_astype(arg, float);
}
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(
    uchar8 arg) {
  return __builtin_astype(arg, char8);
}
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(
    short4 arg) {
  return __builtin_astype(arg, char8);
}
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(
    ushort4 arg) {
  return __builtin_astype(arg, char8);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(half4 arg) {
  return __builtin_astype(arg, char8);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(int2 arg) {
  return __builtin_astype(arg, char8);
}
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(uint2 arg) {
  return __builtin_astype(arg, char8);
}
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(
    float2 arg) {
  return __builtin_astype(arg, char8);
}
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(long arg) {
  return __builtin_astype(arg, char8);
}
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(ulong arg) {
  return __builtin_astype(arg, char8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(
    double arg) {
  return __builtin_astype(arg, char8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    char8 arg) {
  return __builtin_astype(arg, uchar8);
}
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    short4 arg) {
  return __builtin_astype(arg, uchar8);
}
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    ushort4 arg) {
  return __builtin_astype(arg, uchar8);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    half4 arg) {
  return __builtin_astype(arg, uchar8);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    int2 arg) {
  return __builtin_astype(arg, uchar8);
}
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    uint2 arg) {
  return __builtin_astype(arg, uchar8);
}
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    float2 arg) {
  return __builtin_astype(arg, uchar8);
}
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    long arg) {
  return __builtin_astype(arg, uchar8);
}
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    ulong arg) {
  return __builtin_astype(arg, uchar8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(
    double arg) {
  return __builtin_astype(arg, uchar8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    char8 arg) {
  return __builtin_astype(arg, short4);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    uchar8 arg) {
  return __builtin_astype(arg, short4);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    ushort4 arg) {
  return __builtin_astype(arg, short4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    half4 arg) {
  return __builtin_astype(arg, short4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    int2 arg) {
  return __builtin_astype(arg, short4);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    uint2 arg) {
  return __builtin_astype(arg, short4);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    float2 arg) {
  return __builtin_astype(arg, short4);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    long arg) {
  return __builtin_astype(arg, short4);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    ulong arg) {
  return __builtin_astype(arg, short4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    double arg) {
  return __builtin_astype(arg, short4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    char8 arg) {
  return __builtin_astype(arg, ushort4);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    uchar8 arg) {
  return __builtin_astype(arg, ushort4);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    short4 arg) {
  return __builtin_astype(arg, ushort4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    half4 arg) {
  return __builtin_astype(arg, ushort4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    int2 arg) {
  return __builtin_astype(arg, ushort4);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    uint2 arg) {
  return __builtin_astype(arg, ushort4);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    float2 arg) {
  return __builtin_astype(arg, ushort4);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    long arg) {
  return __builtin_astype(arg, ushort4);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    ulong arg) {
  return __builtin_astype(arg, ushort4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    double arg) {
  return __builtin_astype(arg, ushort4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(char8 arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(
    uchar8 arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(
    short4 arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(
    ushort4 arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(int2 arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(uint2 arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(
    float2 arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(long arg) {
  return __builtin_astype(arg, half4);
}
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(ulong arg) {
  return __builtin_astype(arg, half4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(
    double arg) {
  return __builtin_astype(arg, half4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(char8 arg) {
  return __builtin_astype(arg, int2);
}
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(uchar8 arg) {
  return __builtin_astype(arg, int2);
}
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(short4 arg) {
  return __builtin_astype(arg, int2);
}
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(ushort4 arg) {
  return __builtin_astype(arg, int2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(half4 arg) {
  return __builtin_astype(arg, int2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(uint2 arg) {
  return __builtin_astype(arg, int2);
}
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(float2 arg) {
  return __builtin_astype(arg, int2);
}
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(long arg) {
  return __builtin_astype(arg, int2);
}
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(ulong arg) {
  return __builtin_astype(arg, int2);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(double arg) {
  return __builtin_astype(arg, int2);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(char8 arg) {
  return __builtin_astype(arg, uint2);
}
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(
    uchar8 arg) {
  return __builtin_astype(arg, uint2);
}
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(
    short4 arg) {
  return __builtin_astype(arg, uint2);
}
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(
    ushort4 arg) {
  return __builtin_astype(arg, uint2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(half4 arg) {
  return __builtin_astype(arg, uint2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(int2 arg) {
  return __builtin_astype(arg, uint2);
}
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(
    float2 arg) {
  return __builtin_astype(arg, uint2);
}
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(long arg) {
  return __builtin_astype(arg, uint2);
}
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(ulong arg) {
  return __builtin_astype(arg, uint2);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(
    double arg) {
  return __builtin_astype(arg, uint2);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    char8 arg) {
  return __builtin_astype(arg, float2);
}
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    uchar8 arg) {
  return __builtin_astype(arg, float2);
}
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    short4 arg) {
  return __builtin_astype(arg, float2);
}
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    ushort4 arg) {
  return __builtin_astype(arg, float2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    half4 arg) {
  return __builtin_astype(arg, float2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    int2 arg) {
  return __builtin_astype(arg, float2);
}
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    uint2 arg) {
  return __builtin_astype(arg, float2);
}
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    long arg) {
  return __builtin_astype(arg, float2);
}
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    ulong arg) {
  return __builtin_astype(arg, float2);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(
    double arg) {
  return __builtin_astype(arg, float2);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(char8 arg) {
  return __builtin_astype(arg, long);
}
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(uchar8 arg) {
  return __builtin_astype(arg, long);
}
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(short4 arg) {
  return __builtin_astype(arg, long);
}
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(ushort4 arg) {
  return __builtin_astype(arg, long);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(half4 arg) {
  return __builtin_astype(arg, long);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(int2 arg) {
  return __builtin_astype(arg, long);
}
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(uint2 arg) {
  return __builtin_astype(arg, long);
}
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(float2 arg) {
  return __builtin_astype(arg, long);
}
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(ulong arg) {
  return __builtin_astype(arg, long);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(double arg) {
  return __builtin_astype(arg, long);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(char8 arg) {
  return __builtin_astype(arg, ulong);
}
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(
    uchar8 arg) {
  return __builtin_astype(arg, ulong);
}
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(
    short4 arg) {
  return __builtin_astype(arg, ulong);
}
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(
    ushort4 arg) {
  return __builtin_astype(arg, ulong);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(half4 arg) {
  return __builtin_astype(arg, ulong);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(int2 arg) {
  return __builtin_astype(arg, ulong);
}
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(uint2 arg) {
  return __builtin_astype(arg, ulong);
}
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(
    float2 arg) {
  return __builtin_astype(arg, ulong);
}
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(long arg) {
  return __builtin_astype(arg, ulong);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(
    double arg) {
  return __builtin_astype(arg, ulong);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    char8 arg) {
  return __builtin_astype(arg, double);
}
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    uchar8 arg) {
  return __builtin_astype(arg, double);
}
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    short4 arg) {
  return __builtin_astype(arg, double);
}
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    ushort4 arg) {
  return __builtin_astype(arg, double);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    half4 arg) {
  return __builtin_astype(arg, double);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    int2 arg) {
  return __builtin_astype(arg, double);
}
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    uint2 arg) {
  return __builtin_astype(arg, double);
}
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    float2 arg) {
  return __builtin_astype(arg, double);
}
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    long arg) {
  return __builtin_astype(arg, double);
}
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(
    ulong arg) {
  return __builtin_astype(arg, double);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    uchar16 arg) {
  return __builtin_astype(arg, char16);
}
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    short8 arg) {
  return __builtin_astype(arg, char16);
}
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    ushort8 arg) {
  return __builtin_astype(arg, char16);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    half8 arg) {
  return __builtin_astype(arg, char16);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    int4 arg) {
  return __builtin_astype(arg, char16);
}
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    uint4 arg) {
  return __builtin_astype(arg, char16);
}
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    float4 arg) {
  return __builtin_astype(arg, char16);
}
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    long2 arg) {
  return __builtin_astype(arg, char16);
}
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    ulong2 arg) {
  return __builtin_astype(arg, char16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(
    double2 arg) {
  return __builtin_astype(arg, char16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    char16 arg) {
  return __builtin_astype(arg, uchar16);
}
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    short8 arg) {
  return __builtin_astype(arg, uchar16);
}
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    ushort8 arg) {
  return __builtin_astype(arg, uchar16);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    half8 arg) {
  return __builtin_astype(arg, uchar16);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    int4 arg) {
  return __builtin_astype(arg, uchar16);
}
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    uint4 arg) {
  return __builtin_astype(arg, uchar16);
}
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    float4 arg) {
  return __builtin_astype(arg, uchar16);
}
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    long2 arg) {
  return __builtin_astype(arg, uchar16);
}
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    ulong2 arg) {
  return __builtin_astype(arg, uchar16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar16(
    double2 arg) {
  return __builtin_astype(arg, uchar16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    char16 arg) {
  return __builtin_astype(arg, short8);
}
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    uchar16 arg) {
  return __builtin_astype(arg, short8);
}
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    ushort8 arg) {
  return __builtin_astype(arg, short8);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    half8 arg) {
  return __builtin_astype(arg, short8);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    int4 arg) {
  return __builtin_astype(arg, short8);
}
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    uint4 arg) {
  return __builtin_astype(arg, short8);
}
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    float4 arg) {
  return __builtin_astype(arg, short8);
}
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    long2 arg) {
  return __builtin_astype(arg, short8);
}
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    ulong2 arg) {
  return __builtin_astype(arg, short8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(
    double2 arg) {
  return __builtin_astype(arg, short8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    char16 arg) {
  return __builtin_astype(arg, ushort8);
}
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    uchar16 arg) {
  return __builtin_astype(arg, ushort8);
}
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    short8 arg) {
  return __builtin_astype(arg, ushort8);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    half8 arg) {
  return __builtin_astype(arg, ushort8);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    int4 arg) {
  return __builtin_astype(arg, ushort8);
}
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    uint4 arg) {
  return __builtin_astype(arg, ushort8);
}
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    float4 arg) {
  return __builtin_astype(arg, ushort8);
}
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    long2 arg) {
  return __builtin_astype(arg, ushort8);
}
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    ulong2 arg) {
  return __builtin_astype(arg, ushort8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort8(
    double2 arg) {
  return __builtin_astype(arg, ushort8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(
    char16 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(
    uchar16 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(
    short8 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(
    ushort8 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(int4 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(uint4 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(
    float4 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(long2 arg) {
  return __builtin_astype(arg, half8);
}
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(
    ulong2 arg) {
  return __builtin_astype(arg, half8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(
    double2 arg) {
  return __builtin_astype(arg, half8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(char16 arg) {
  return __builtin_astype(arg, int4);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(uchar16 arg) {
  return __builtin_astype(arg, int4);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(short8 arg) {
  return __builtin_astype(arg, int4);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(ushort8 arg) {
  return __builtin_astype(arg, int4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(half8 arg) {
  return __builtin_astype(arg, int4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(uint4 arg) {
  return __builtin_astype(arg, int4);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(float4 arg) {
  return __builtin_astype(arg, int4);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(long2 arg) {
  return __builtin_astype(arg, int4);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(ulong2 arg) {
  return __builtin_astype(arg, int4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(double2 arg) {
  return __builtin_astype(arg, int4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    char16 arg) {
  return __builtin_astype(arg, uint4);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    uchar16 arg) {
  return __builtin_astype(arg, uint4);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    short8 arg) {
  return __builtin_astype(arg, uint4);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    ushort8 arg) {
  return __builtin_astype(arg, uint4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(half8 arg) {
  return __builtin_astype(arg, uint4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(int4 arg) {
  return __builtin_astype(arg, uint4);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    float4 arg) {
  return __builtin_astype(arg, uint4);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(long2 arg) {
  return __builtin_astype(arg, uint4);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    ulong2 arg) {
  return __builtin_astype(arg, uint4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    double2 arg) {
  return __builtin_astype(arg, uint4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    char16 arg) {
  return __builtin_astype(arg, float4);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    uchar16 arg) {
  return __builtin_astype(arg, float4);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    short8 arg) {
  return __builtin_astype(arg, float4);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    ushort8 arg) {
  return __builtin_astype(arg, float4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    half8 arg) {
  return __builtin_astype(arg, float4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    int4 arg) {
  return __builtin_astype(arg, float4);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    uint4 arg) {
  return __builtin_astype(arg, float4);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    long2 arg) {
  return __builtin_astype(arg, float4);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    ulong2 arg) {
  return __builtin_astype(arg, float4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    double2 arg) {
  return __builtin_astype(arg, float4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(
    char16 arg) {
  return __builtin_astype(arg, long2);
}
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(
    uchar16 arg) {
  return __builtin_astype(arg, long2);
}
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(
    short8 arg) {
  return __builtin_astype(arg, long2);
}
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(
    ushort8 arg) {
  return __builtin_astype(arg, long2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(half8 arg) {
  return __builtin_astype(arg, long2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(int4 arg) {
  return __builtin_astype(arg, long2);
}
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(uint4 arg) {
  return __builtin_astype(arg, long2);
}
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(
    float4 arg) {
  return __builtin_astype(arg, long2);
}
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(
    ulong2 arg) {
  return __builtin_astype(arg, long2);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(
    double2 arg) {
  return __builtin_astype(arg, long2);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    char16 arg) {
  return __builtin_astype(arg, ulong2);
}
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    uchar16 arg) {
  return __builtin_astype(arg, ulong2);
}
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    short8 arg) {
  return __builtin_astype(arg, ulong2);
}
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    ushort8 arg) {
  return __builtin_astype(arg, ulong2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    half8 arg) {
  return __builtin_astype(arg, ulong2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    int4 arg) {
  return __builtin_astype(arg, ulong2);
}
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    uint4 arg) {
  return __builtin_astype(arg, ulong2);
}
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    float4 arg) {
  return __builtin_astype(arg, ulong2);
}
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    long2 arg) {
  return __builtin_astype(arg, ulong2);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(
    double2 arg) {
  return __builtin_astype(arg, ulong2);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    char16 arg) {
  return __builtin_astype(arg, double2);
}
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    uchar16 arg) {
  return __builtin_astype(arg, double2);
}
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    short8 arg) {
  return __builtin_astype(arg, double2);
}
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    ushort8 arg) {
  return __builtin_astype(arg, double2);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    half8 arg) {
  return __builtin_astype(arg, double2);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    int4 arg) {
  return __builtin_astype(arg, double2);
}
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    uint4 arg) {
  return __builtin_astype(arg, double2);
}
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    float4 arg) {
  return __builtin_astype(arg, double2);
}
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    long2 arg) {
  return __builtin_astype(arg, double2);
}
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double2(
    ulong2 arg) {
  return __builtin_astype(arg, double2);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    ushort16 arg) {
  return __builtin_astype(arg, short16);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    half16 arg) {
  return __builtin_astype(arg, short16);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    int8 arg) {
  return __builtin_astype(arg, short16);
}
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    uint8 arg) {
  return __builtin_astype(arg, short16);
}
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    float8 arg) {
  return __builtin_astype(arg, short16);
}
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    long4 arg) {
  return __builtin_astype(arg, short16);
}
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    ulong4 arg) {
  return __builtin_astype(arg, short16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short16(
    double4 arg) {
  return __builtin_astype(arg, short16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    short16 arg) {
  return __builtin_astype(arg, ushort16);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    half16 arg) {
  return __builtin_astype(arg, ushort16);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    int8 arg) {
  return __builtin_astype(arg, ushort16);
}
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    uint8 arg) {
  return __builtin_astype(arg, ushort16);
}
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    float8 arg) {
  return __builtin_astype(arg, ushort16);
}
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    long4 arg) {
  return __builtin_astype(arg, ushort16);
}
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    ulong4 arg) {
  return __builtin_astype(arg, ushort16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort16(
    double4 arg) {
  return __builtin_astype(arg, ushort16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    short16 arg) {
  return __builtin_astype(arg, half16);
}
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    ushort16 arg) {
  return __builtin_astype(arg, half16);
}
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    int8 arg) {
  return __builtin_astype(arg, half16);
}
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    uint8 arg) {
  return __builtin_astype(arg, half16);
}
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    float8 arg) {
  return __builtin_astype(arg, half16);
}
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    long4 arg) {
  return __builtin_astype(arg, half16);
}
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    ulong4 arg) {
  return __builtin_astype(arg, half16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(
    double4 arg) {
  return __builtin_astype(arg, half16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(short16 arg) {
  return __builtin_astype(arg, int8);
}
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(
    ushort16 arg) {
  return __builtin_astype(arg, int8);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(half16 arg) {
  return __builtin_astype(arg, int8);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(uint8 arg) {
  return __builtin_astype(arg, int8);
}
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(float8 arg) {
  return __builtin_astype(arg, int8);
}
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(long4 arg) {
  return __builtin_astype(arg, int8);
}
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(ulong4 arg) {
  return __builtin_astype(arg, int8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(double4 arg) {
  return __builtin_astype(arg, int8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(
    short16 arg) {
  return __builtin_astype(arg, uint8);
}
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(
    ushort16 arg) {
  return __builtin_astype(arg, uint8);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(
    half16 arg) {
  return __builtin_astype(arg, uint8);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(int8 arg) {
  return __builtin_astype(arg, uint8);
}
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(
    float8 arg) {
  return __builtin_astype(arg, uint8);
}
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(long4 arg) {
  return __builtin_astype(arg, uint8);
}
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(
    ulong4 arg) {
  return __builtin_astype(arg, uint8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(
    double4 arg) {
  return __builtin_astype(arg, uint8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    short16 arg) {
  return __builtin_astype(arg, float8);
}
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    ushort16 arg) {
  return __builtin_astype(arg, float8);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    half16 arg) {
  return __builtin_astype(arg, float8);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    int8 arg) {
  return __builtin_astype(arg, float8);
}
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    uint8 arg) {
  return __builtin_astype(arg, float8);
}
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    long4 arg) {
  return __builtin_astype(arg, float8);
}
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    ulong4 arg) {
  return __builtin_astype(arg, float8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(
    double4 arg) {
  return __builtin_astype(arg, float8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    short16 arg) {
  return __builtin_astype(arg, long4);
}
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    ushort16 arg) {
  return __builtin_astype(arg, long4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    half16 arg) {
  return __builtin_astype(arg, long4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(int8 arg) {
  return __builtin_astype(arg, long4);
}
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(uint8 arg) {
  return __builtin_astype(arg, long4);
}
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    float8 arg) {
  return __builtin_astype(arg, long4);
}
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    ulong4 arg) {
  return __builtin_astype(arg, long4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    double4 arg) {
  return __builtin_astype(arg, long4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    short16 arg) {
  return __builtin_astype(arg, ulong4);
}
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    ushort16 arg) {
  return __builtin_astype(arg, ulong4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    half16 arg) {
  return __builtin_astype(arg, ulong4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    int8 arg) {
  return __builtin_astype(arg, ulong4);
}
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    uint8 arg) {
  return __builtin_astype(arg, ulong4);
}
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    float8 arg) {
  return __builtin_astype(arg, ulong4);
}
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    long4 arg) {
  return __builtin_astype(arg, ulong4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    double4 arg) {
  return __builtin_astype(arg, ulong4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    short16 arg) {
  return __builtin_astype(arg, double4);
}
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    ushort16 arg) {
  return __builtin_astype(arg, double4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    half16 arg) {
  return __builtin_astype(arg, double4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    int8 arg) {
  return __builtin_astype(arg, double4);
}
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    uint8 arg) {
  return __builtin_astype(arg, double4);
}
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    float8 arg) {
  return __builtin_astype(arg, double4);
}
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    long4 arg) {
  return __builtin_astype(arg, double4);
}
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    ulong4 arg) {
  return __builtin_astype(arg, double4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(
    uint16 arg) {
  return __builtin_astype(arg, int16);
}
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(
    float16 arg) {
  return __builtin_astype(arg, int16);
}
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(long8 arg) {
  return __builtin_astype(arg, int16);
}
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(
    ulong8 arg) {
  return __builtin_astype(arg, int16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(
    double8 arg) {
  return __builtin_astype(arg, int16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint16(
    int16 arg) {
  return __builtin_astype(arg, uint16);
}
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint16(
    float16 arg) {
  return __builtin_astype(arg, uint16);
}
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint16(
    long8 arg) {
  return __builtin_astype(arg, uint16);
}
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint16(
    ulong8 arg) {
  return __builtin_astype(arg, uint16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint16(
    double8 arg) {
  return __builtin_astype(arg, uint16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float16(
    int16 arg) {
  return __builtin_astype(arg, float16);
}
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float16(
    uint16 arg) {
  return __builtin_astype(arg, float16);
}
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float16(
    long8 arg) {
  return __builtin_astype(arg, float16);
}
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float16(
    ulong8 arg) {
  return __builtin_astype(arg, float16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float16(
    double8 arg) {
  return __builtin_astype(arg, float16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(int16 arg) {
  return __builtin_astype(arg, long8);
}
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(
    uint16 arg) {
  return __builtin_astype(arg, long8);
}
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(
    float16 arg) {
  return __builtin_astype(arg, long8);
}
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(
    ulong8 arg) {
  return __builtin_astype(arg, long8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(
    double8 arg) {
  return __builtin_astype(arg, long8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong8(
    int16 arg) {
  return __builtin_astype(arg, ulong8);
}
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong8(
    uint16 arg) {
  return __builtin_astype(arg, ulong8);
}
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong8(
    float16 arg) {
  return __builtin_astype(arg, ulong8);
}
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong8(
    long8 arg) {
  return __builtin_astype(arg, ulong8);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong8(
    double8 arg) {
  return __builtin_astype(arg, ulong8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double8(
    int16 arg) {
  return __builtin_astype(arg, double8);
}
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double8(
    uint16 arg) {
  return __builtin_astype(arg, double8);
}
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double8(
    float16 arg) {
  return __builtin_astype(arg, double8);
}
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double8(
    long8 arg) {
  return __builtin_astype(arg, double8);
}
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double8(
    ulong8 arg) {
  return __builtin_astype(arg, double8);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long16(
    ulong16 arg) {
  return __builtin_astype(arg, long16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long16(
    double16 arg) {
  return __builtin_astype(arg, long16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong16(
    long16 arg) {
  return __builtin_astype(arg, ulong16);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong16(
    double16 arg) {
  return __builtin_astype(arg, ulong16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double16(
    long16 arg) {
  return __builtin_astype(arg, double16);
}
double16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double16(
    ulong16 arg) {
  return __builtin_astype(arg, double16);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
char3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char3(
    uchar3 arg) {
  return __builtin_astype(arg, char3);
}
uchar3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar3(
    char3 arg) {
  return __builtin_astype(arg, uchar3);
}
char3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char3(char4 arg) {
  return __builtin_astype(arg, char3);
}
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(char3 arg) {
  return __builtin_astype(arg, char4);
}
char3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char3(
    uchar4 arg) {
  return __builtin_astype(arg, char3);
}
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    char3 arg) {
  return __builtin_astype(arg, uchar4);
}
uchar3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar3(
    char4 arg) {
  return __builtin_astype(arg, uchar3);
}
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(
    uchar3 arg) {
  return __builtin_astype(arg, char4);
}
uchar3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar3(
    uchar4 arg) {
  return __builtin_astype(arg, uchar3);
}
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(
    uchar3 arg) {
  return __builtin_astype(arg, uchar4);
}
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short3(
    ushort3 arg) {
  return __builtin_astype(arg, short3);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short3(
    half3 arg) {
  return __builtin_astype(arg, short3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort3(
    short3 arg) {
  return __builtin_astype(arg, ushort3);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort3(
    half3 arg) {
  return __builtin_astype(arg, ushort3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(
    short3 arg) {
  return __builtin_astype(arg, half3);
}
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(
    ushort3 arg) {
  return __builtin_astype(arg, half3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short3(
    short4 arg) {
  return __builtin_astype(arg, short3);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    short3 arg) {
  return __builtin_astype(arg, short4);
}
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short3(
    ushort4 arg) {
  return __builtin_astype(arg, short3);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    short3 arg) {
  return __builtin_astype(arg, ushort4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short3(
    half4 arg) {
  return __builtin_astype(arg, short3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(
    short3 arg) {
  return __builtin_astype(arg, half4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort3(
    short4 arg) {
  return __builtin_astype(arg, ushort3);
}
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    ushort3 arg) {
  return __builtin_astype(arg, short4);
}
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort3(
    ushort4 arg) {
  return __builtin_astype(arg, ushort3);
}
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    ushort3 arg) {
  return __builtin_astype(arg, ushort4);
}
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort3(
    half4 arg) {
  return __builtin_astype(arg, ushort3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(
    ushort3 arg) {
  return __builtin_astype(arg, half4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(
    short4 arg) {
  return __builtin_astype(arg, half3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(
    half3 arg) {
  return __builtin_astype(arg, short4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(
    ushort4 arg) {
  return __builtin_astype(arg, half3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort4(
    half3 arg) {
  return __builtin_astype(arg, ushort4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(half4 arg) {
  return __builtin_astype(arg, half3);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(half3 arg) {
  return __builtin_astype(arg, half4);
}
#endif  // __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(uint3 arg) {
  return __builtin_astype(arg, int3);
}
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(float3 arg) {
  return __builtin_astype(arg, int3);
}
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(int3 arg) {
  return __builtin_astype(arg, uint3);
}
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(
    float3 arg) {
  return __builtin_astype(arg, uint3);
}
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float3(
    int3 arg) {
  return __builtin_astype(arg, float3);
}
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float3(
    uint3 arg) {
  return __builtin_astype(arg, float3);
}
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(int4 arg) {
  return __builtin_astype(arg, int3);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(int3 arg) {
  return __builtin_astype(arg, int4);
}
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(uint4 arg) {
  return __builtin_astype(arg, int3);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(int3 arg) {
  return __builtin_astype(arg, uint4);
}
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(float4 arg) {
  return __builtin_astype(arg, int3);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    int3 arg) {
  return __builtin_astype(arg, float4);
}
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(int4 arg) {
  return __builtin_astype(arg, uint3);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(uint3 arg) {
  return __builtin_astype(arg, int4);
}
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(uint4 arg) {
  return __builtin_astype(arg, uint3);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(uint3 arg) {
  return __builtin_astype(arg, uint4);
}
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(
    float4 arg) {
  return __builtin_astype(arg, uint3);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    uint3 arg) {
  return __builtin_astype(arg, float4);
}
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float3(
    int4 arg) {
  return __builtin_astype(arg, float3);
}
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(float3 arg) {
  return __builtin_astype(arg, int4);
}
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float3(
    uint4 arg) {
  return __builtin_astype(arg, float3);
}
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(
    float3 arg) {
  return __builtin_astype(arg, uint4);
}
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float3(
    float4 arg) {
  return __builtin_astype(arg, float3);
}
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(
    float3 arg) {
  return __builtin_astype(arg, float4);
}
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(
    ulong3 arg) {
  return __builtin_astype(arg, long3);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(
    double3 arg) {
  return __builtin_astype(arg, long3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong3(
    long3 arg) {
  return __builtin_astype(arg, ulong3);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong3(
    double3 arg) {
  return __builtin_astype(arg, ulong3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double3(
    long3 arg) {
  return __builtin_astype(arg, double3);
}
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double3(
    ulong3 arg) {
  return __builtin_astype(arg, double3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(long4 arg) {
  return __builtin_astype(arg, long3);
}
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(long3 arg) {
  return __builtin_astype(arg, long4);
}
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(
    ulong4 arg) {
  return __builtin_astype(arg, long3);
}
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    long3 arg) {
  return __builtin_astype(arg, ulong4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(
    double4 arg) {
  return __builtin_astype(arg, long3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    long3 arg) {
  return __builtin_astype(arg, double4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong3(
    long4 arg) {
  return __builtin_astype(arg, ulong3);
}
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    ulong3 arg) {
  return __builtin_astype(arg, long4);
}
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong3(
    ulong4 arg) {
  return __builtin_astype(arg, ulong3);
}
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    ulong3 arg) {
  return __builtin_astype(arg, ulong4);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong3(
    double4 arg) {
  return __builtin_astype(arg, ulong3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    ulong3 arg) {
  return __builtin_astype(arg, double4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double3(
    long4 arg) {
  return __builtin_astype(arg, double3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(
    double3 arg) {
  return __builtin_astype(arg, long4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double3(
    ulong4 arg) {
  return __builtin_astype(arg, double3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(
    double3 arg) {
  return __builtin_astype(arg, ulong4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double3(
    double4 arg) {
  return __builtin_astype(arg, double3);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double4(
    double3 arg) {
  return __builtin_astype(arg, double4);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

float __CL_CONST_ATTRIBUTES convert_half_to_float(ushort arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES convert_half_to_double(ushort arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rte(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rte(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtz(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtz(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtn(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtn(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtp(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtp(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float2 __CL_CONST_ATTRIBUTES convert_half2_to_float2(ushort2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES convert_half2_to_double2(ushort2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rte(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rte(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtz(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtz(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtn(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtn(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtp(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtp(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float3 __CL_CONST_ATTRIBUTES convert_half3_to_float3(ushort3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES convert_half3_to_double3(ushort3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rte(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rte(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtz(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtz(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtn(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtn(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtp(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtp(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float4 __CL_CONST_ATTRIBUTES convert_half4_to_float4(ushort4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES convert_half4_to_double4(ushort4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rte(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rte(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtz(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtz(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtn(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtn(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtp(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtp(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float8 __CL_CONST_ATTRIBUTES convert_half8_to_float8(ushort8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES convert_half8_to_double8(ushort8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rte(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rte(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtz(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtz(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtn(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtn(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtp(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtp(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float16 __CL_CONST_ATTRIBUTES convert_half16_to_float16(ushort16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES convert_half16_to_double16(ushort16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rte(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rte(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtz(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtz(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtn(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtn(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifndef __cplusplus
float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 3));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 3));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 3));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 3));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 4));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const private unaligned_type *p =
      (const private unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 4));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const global unaligned_type *p =
      (const global unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 4));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const local unaligned_type *p =
      (const local unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half unaligned_type __attribute__((aligned(sizeof(ushort))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 1));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half_to_float(as_ushort(t));
  } else {
    return convert_float(t);
  }
#else
  return convert_half_to_float(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 2));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half2_to_float2(as_ushort2(t));
  } else {
    return convert_float2(t);
  }
#else
  return convert_half2_to_float2(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 4));
  unaligned_type t;
  t.x = p->x;
  t.y = p->y;
  t.z = p->z;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half3_to_float3(as_ushort3(t));
  } else {
    return convert_float3(t);
  }
#else
  return convert_half3_to_float3(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 4));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half4_to_float4(as_ushort4(t));
  } else {
    return convert_float4(t);
  }
#else
  return convert_half4_to_float4(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 8));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half8_to_float8(as_ushort8(t));
  } else {
    return convert_float8(t);
  }
#else
  return convert_half8_to_float8(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const constant half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  typedef half16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
#endif  // __CA_BUILTINS_HALF_SUPPORT
  const constant unaligned_type *p =
      (const constant unaligned_type *)(pointer + (offset * 16));
  unaligned_type t = *p;
#ifdef __CA_BUILTINS_HALF_SUPPORT
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    return convert_half16_to_float16(as_ushort16(t));
  } else {
    return convert_float16(t);
  }
#else
  return convert_half16_to_float16(t);
#endif  // __CA_BUILTINS_HALF_SUPPORT
}

void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 3));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_float_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_float_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_float2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_float2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_float3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_float3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_float4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_float4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_float8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_float8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_float16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_float16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                private half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
 private
  unaligned_type *p = (private unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                global half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  global unaligned_type *p = (global unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rte(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rte(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtz(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtz(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtn(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtn(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort soft_convert = convert_double_to_half_rtp(data);
    converted = as_half(soft_convert);
  } else {
    converted = convert_half_rtp(data);
  }
  typedef half unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort unaligned_type __attribute__((aligned(sizeof(ushort))));
  ushort converted = convert_double_to_half_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 1));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rte(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rte(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtz(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtz(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtn(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtn(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half2 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort2 soft_convert = convert_double2_to_half2_rtp(data);
    converted = as_half2(soft_convert);
  } else {
    converted = convert_half2_rtp(data);
  }
  typedef half2 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort2 unaligned_type __attribute__((aligned(sizeof(ushort2))));
  ushort2 converted = convert_double2_to_half2_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 2));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rte(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rte(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtz(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtz(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtn(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtn(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half3 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort3 soft_convert = convert_double3_to_half3_rtp(data);
    converted = as_half3(soft_convert);
  } else {
    converted = convert_half3_rtp(data);
  }
  typedef half3 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort3 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort3 converted = convert_double3_to_half3_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  p->x = converted.x;
  p->y = converted.y;
  p->z = converted.z;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rte(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rte(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtz(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtz(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtn(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtn(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half4 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort4 soft_convert = convert_double4_to_half4_rtp(data);
    converted = as_half4(soft_convert);
  } else {
    converted = convert_half4_rtp(data);
  }
  typedef half4 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort4 unaligned_type __attribute__((aligned(sizeof(ushort4))));
  ushort4 converted = convert_double4_to_half4_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 4));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rte(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rte(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtz(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtz(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtn(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtn(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half8 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort8 soft_convert = convert_double8_to_half8_rtp(data);
    converted = as_half8(soft_convert);
  } else {
    converted = convert_half8_rtp(data);
  }
  typedef half8 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort8 unaligned_type __attribute__((aligned(sizeof(ushort8))));
  ushort8 converted = convert_double8_to_half8_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 8));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rte(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rte(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rte(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtz(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtz(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtz(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtn(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtn(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtn(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                local half *pointer) {
#ifdef __CA_BUILTINS_HALF_SUPPORT
  half16 converted;
  if (__abacus_isftz() && !__abacus_isembeddedprofile()) {
    ushort16 soft_convert = convert_double16_to_half16_rtp(data);
    converted = as_half16(soft_convert);
  } else {
    converted = convert_half16_rtp(data);
  }
  typedef half16 unaligned_type __attribute__((aligned(sizeof(half))));
#else
  typedef ushort16 unaligned_type __attribute__((aligned(sizeof(ushort16))));
  ushort16 converted = convert_double16_to_half16_rtp(data);
#endif  // __CA_BUILTINS_HALF_SUPPORT
  local unaligned_type *p = (local unaligned_type *)(pointer + (offset * 16));
  *p = converted;
}

#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  //__cplusplus

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

int __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atom_dec(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atom_inc(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile int local *p);
int __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile int local *p);
int __CL_BUILTIN_ATTRIBUTES atom_dec(volatile int local *p);
int __CL_BUILTIN_ATTRIBUTES atom_inc(volatile int local *p);
long __CL_BUILTIN_ATTRIBUTES atom_dec(volatile long global *p);
long __CL_BUILTIN_ATTRIBUTES atom_inc(volatile long global *p);
long __CL_BUILTIN_ATTRIBUTES atom_dec(volatile long local *p);
long __CL_BUILTIN_ATTRIBUTES atom_inc(volatile long local *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atom_dec(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atom_inc(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile uint local *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile uint local *p);
uint __CL_BUILTIN_ATTRIBUTES atom_dec(volatile uint local *p);
uint __CL_BUILTIN_ATTRIBUTES atom_inc(volatile uint local *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_dec(volatile ulong global *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_inc(volatile ulong global *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_dec(volatile ulong local *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_inc(volatile ulong local *p);
int __CL_BUILTIN_ATTRIBUTES atomic_add(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_min(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_max(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_and(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_or(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_add(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_sub(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_min(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_max(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_and(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_or(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xor(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_add(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_min(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_max(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_and(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_or(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_add(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_sub(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_min(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_max(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_and(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_or(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xor(volatile int local *p, int val);
long __CL_BUILTIN_ATTRIBUTES atom_add(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_sub(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_min(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_max(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_and(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_or(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xor(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_add(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_sub(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_min(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_max(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_and(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_or(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xor(volatile long local *p, long val);
uint __CL_BUILTIN_ATTRIBUTES atomic_add(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_min(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_max(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_and(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_or(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_add(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_sub(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_min(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_max(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_and(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_or(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xor(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_add(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_min(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_max(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_and(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_or(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_add(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_sub(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_min(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_max(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_and(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_or(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xor(volatile uint local *p, uint val);
ulong __CL_BUILTIN_ATTRIBUTES atom_add(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_sub(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_min(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_max(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_and(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_or(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xor(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_add(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_sub(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_min(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_max(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_and(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_or(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xor(volatile ulong local *p, ulong val);
float __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile float global *p, float val);
float __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile float global *p, float val);
float __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile float local *p, float val);
float __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile float local *p, float val);
int __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile int global *p, int cmp,
                                           int val);
int __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile int global *p, int cmp,
                                         int val);
int __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile int local *p, int cmp,
                                           int val);
int __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile int local *p, int cmp,
                                         int val);
long __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile long global *p, long cmp,
                                          long val);
long __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile long local *p, long cmp,
                                          long val);
uint __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile uint global *p, uint cmp,
                                            uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile uint global *p, uint cmp,
                                          uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile uint local *p, uint cmp,
                                            uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile uint local *p, uint cmp,
                                          uint val);
ulong __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile ulong global *p, ulong cmp,
                                           ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile ulong local *p, ulong cmp,
                                           ulong val);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

void __CL_BARRIER_ATTRIBUTES barrier(cl_mem_fence_flags flags);
void __CL_BUILTIN_ATTRIBUTES mem_fence(cl_mem_fence_flags flags);
void __CL_BUILTIN_ATTRIBUTES read_mem_fence(cl_mem_fence_flags flags);
void __CL_BUILTIN_ATTRIBUTES write_mem_fence(cl_mem_fence_flags flags);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

size_t __CL_WORK_ITEM_ATTRIBUTES get_global_size(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_global_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_local_size(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_local_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_num_groups(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_group_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_global_offset(uint x);
uint __CL_WORK_ITEM_ATTRIBUTES get_work_dim(void);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifndef __cplusplus
#ifdef __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  //__cplusplus
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char2 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char3 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char4 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char8 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char16 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short2 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short3 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short4 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short8 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short16 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int2 *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int3 *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int4 *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int8 *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int16 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long2 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long3 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long4 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long8 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long16 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar2 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar3 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar4 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar8 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar16 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort2 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort3 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort4 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort8 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort16 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint2 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint3 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint4 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint8 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint16 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong2 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong3 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong4 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong8 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong16 *pointer,
                                      size_t num) {}
#ifdef __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half *pointer, size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half2 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half3 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half4 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half8 *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half16 *pointer,
                                      size_t num) {}
#endif  // __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float *pointer, size_t num) {
}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float2 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float3 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float4 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float8 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float16 *pointer,
                                      size_t num) {}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double2 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double3 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double4 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double8 *pointer,
                                      size_t num) {}
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double16 *pointer,
                                      size_t num) {}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

int __attribute__((weak)) printf(const constant char *const restrict fmt, ...);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __cplusplus
};
#endif
