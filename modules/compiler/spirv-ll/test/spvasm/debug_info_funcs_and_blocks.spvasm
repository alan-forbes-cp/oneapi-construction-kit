; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s | FileCheck %s

               OpCapability Kernel
               OpCapability Addresses
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %testfn "testfn"
       %file = OpString "spvasm/debug_info_funcs_and_blocks.spvasm"
               OpName %testfn "testfn"
               OpName %file "file"
               OpName %entry "entry"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void

; Test an empty line range outside a function - this shouldn't do anything to
; the following function, blocks, or instructions.
               OpLine %file 0 0
               OpNoLine

; CHECK: define private spir_func void @testfn{{.*}}(){{.*}}!dbg [[mainSubprogram:![0-9]+]]
     %testfn = OpFunction %void None %3

; Test an empty line range outside a block - this shouldn't do anything to the
; following blocks or instructions
               OpLine %file 2 1
               OpNoLine

;               OpLine %file 3 2
      %entry = OpLabel

; Test an empty range inside a block - this shouldn't do anything to the
; following instructions
               OpLine %file 4 4
               OpNoLine

; CHECK: ret void
; CHECK: }
               OpReturn
               OpFunctionEnd

; CHECK: !llvm.dbg.cu = !{[[CompileUnit:![0-9]+]]}
;
; CHECK: [[CompileUnit]] = distinct !DICompileUnit(language: DW_LANG_OpenCL, file: [[File:![0-9]+]],{{( producer: "Codeplay SPIR-V  translator",)?}} isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug{{(, enums: ![0-9]+)?}}{{(, subprograms: ![0-9]+)?}})
; CHECK: [[File]] = !DIFile(filename: "debug_info_funcs_and_blocks.spvasm", directory: "spvasm")

; Note we need a line to create the subprogram. It isn't always obvious which
; line to take - as in this test - but we take the line of the first open OpLine
; at the time the function is declared, or if there is none then we take the
; first OpLine inside the function. Hence line 2.
; CHECK: [[mainSubprogram]] = distinct !DISubprogram(name: "testfn{{.*}}", linkageName: "testfn{{.*}}", scope: null, file: [[File]],
; CHECK-SAME: line: 2, type: [[mainSubroutineType:![0-9]+]]
; CHECK-SAME: {{(, isLocal: true, isDefinition: true)?}}, scopeLine: 1
; CHECK-SAME: {{(, isOptimized: false)?}}
; CHECK-SAME: {{(, spFlags: DISPFlagDefinition)?}}
; CHECK-SAME: {{(, unit: ![0-9]+)?}}
; CHECK-SAME: {{(, (variables|retainedNodes): ![0-9]+)?}}
; CHECK-SAME: )

; CHECK: [[mainSubroutineType]] = !DISubroutineType(types: !{{[0-9]+}})
