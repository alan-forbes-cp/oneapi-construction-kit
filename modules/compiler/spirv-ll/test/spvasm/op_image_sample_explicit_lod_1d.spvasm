; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Sampled1D %spv_file_s | FileCheck %s
                      OpCapability Kernel
                      OpCapability Addresses
                      OpCapability Sampled1D
                      OpMemoryModel Physical64 OpenCL
                      OpEntryPoint Kernel %image1d "image1d"
                      OpSource OpenCL_C 102000
                      OpName %in_image "in_image"
                      OpName %in_sampler "in_sampler"

; All types, variables and constants               
            %void_t = OpTypeVoid
           %float_t = OpTypeFloat 32
            %uint_t = OpTypeInt 32 0
         %v4float_t = OpTypeVector %float_t 4
          %v4uint_t = OpTypeVector %uint_t 4
         %sampler_t = OpTypeSampler
      %image1d_t = OpTypeImage %void_t 1D 0 0 0 0 Unknown ReadOnly
           %float_1 = OpConstant %float_t 1
             %int_1 = OpConstant %uint_t 1
   %sampled_image_t = OpTypeSampledImage %image1d_t
      %sampler_fn_t = OpTypeFunction %void_t %sampler_t %image1d_t

; All functions
           %image1d = OpFunction %void_t None %sampler_fn_t
        %in_sampler = OpFunctionParameter %sampler_t
          %in_image = OpFunctionParameter %image1d_t
; CHECK: define spir_kernel void @image1d([[SAMPLER_TY:target\("spirv.Sampler"\)]] noundef %in_sampler,
; CHECK-SAME: [[IMG_TY:target\("spirv.Image", void, 0, 0, 0, 0, 0, 0, 0\)]] noundef %in_image)
                %10 = OpLabel
     %sampled_image = OpSampledImage %sampled_image_t %in_image %in_sampler
                %11 = OpImageSampleExplicitLod %v4float_t %sampled_image %float_1 None
; CHECK: = call spir_func <4 x float> @_Z11read_imagef11ocl_image1d11ocl_samplerf([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, float 1.000000e+00)
                %12 = OpImageSampleExplicitLod %v4float_t %sampled_image %int_1 None 
; CHECK: = call spir_func <4 x float> @_Z11read_imagef11ocl_image1d11ocl_sampleri([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, i32 1)
                %15 = OpImageSampleExplicitLod %v4uint_t %sampled_image %float_1 None
; CHECK: = call spir_func <4 x i32> @_Z12read_imageui11ocl_image1d11ocl_samplerf([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, float 1.000000e+00)
                %16 = OpImageSampleExplicitLod %v4uint_t %sampled_image %int_1 None
; CHECK: = call spir_func <4 x i32> @_Z12read_imageui11ocl_image1d11ocl_sampleri([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, i32 1)
                      OpReturn
; CHECK: ret void
                      OpFunctionEnd
; CHECK: }

