; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s | FileCheck %s
            OpCapability Kernel
            OpMemoryModel Logical OpenCL
            OpEntryPoint Kernel %atomic "atomic"
            OpExecutionMode %atomic LocalSize 1 1 1
            OpName %atomic "atomic"
            OpName %a "a"
    %void = OpTypeVoid
    %uint = OpTypeInt 32 0
 %block_t = OpTypeStruct %uint
%ptr_CrossWorkgroup_block_t = OpTypePointer CrossWorkgroup %block_t
%ptr_CrossWorkgroup_int = OpTypePointer CrossWorkgroup %uint
       %3 = OpTypeFunction %void %ptr_CrossWorkgroup_block_t
       %9 = OpConstant %uint 424
  %uint_1 = OpConstant %uint 1
  %uint_0 = OpConstant %uint 0
  %atomic = OpFunction %void None %3
%block_var = OpFunctionParameter %ptr_CrossWorkgroup_block_t
       %5 = OpLabel
       %a = OpAccessChain %ptr_CrossWorkgroup_int %block_var %uint_0
%original = OpAtomicSMin %uint %a %uint_1 %uint_0 %9
            OpReturn
            OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @atomic(ptr addrspace(1) noundef %0)
; CHECK: [[PTR:%.*]] = getelementptr [[BLOCK:%.*]], ptr addrspace(1) [[BLOCK]], i32 0, i32 0
; CHECK: = call spir_func i32 @_Z10atomic_minPU3AS1Vii(ptr addrspace(1) [[PTR]], i32 424)
; CHECK: ret void
; CHECK: declare spir_func i32 @_Z10atomic_minPU3AS1Vii(ptr addrspace(1), i32)
