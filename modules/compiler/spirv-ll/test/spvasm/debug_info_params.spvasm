; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Linkage %spv_file_s | FileCheck %s

; CHECK: ; ModuleID = '{{.*}}'
               OpCapability Kernel
               OpCapability Linkage
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Logical OpenCL
               OpSource OpenCL_C 102000

       %file = OpString "test/spvasm/debug_info_params.comp"

               OpName %my_kernel "my_kernel"
               OpName %a "a"
               OpName %b "b"
               OpName %c "c"
               OpName %file "file"
       %void = OpTypeVoid
     %int_ty = OpTypeInt 32 0
   %float_ty = OpTypeFloat 32
  %float_pty = OpTypePointer CrossWorkgroup %float_ty
       %bool = OpTypeBool
          %3 = OpTypeFunction %void %int_ty %float_ty %float_pty

; CHECK: define private spir_func void @my_kernel(
; CHECK-SAME:     i32 %a, float %b, ptr addrspace(1) %c)
; CHECK-SAME: !dbg [[MainSubprogram:![0-9]+]]
       %my_kernel = OpFunction %void None %3
          %a = OpFunctionParameter %int_ty
          %b = OpFunctionParameter %float_ty
          %c = OpFunctionParameter %float_pty
          %5 = OpLabel
               OpLine %file 6 3
               OpNoLine
               OpReturn
               OpFunctionEnd

; CHECK: !llvm.dbg.cu = !{[[CompileUnit:![0-9]+]]}

; CHECK: [[CompileUnit]] = distinct !DICompileUnit(language: DW_LANG_OpenCL, file: [[File:![0-9]+]], isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug)
; CHECK: [[File]] = !DIFile(filename: "debug_info_params.comp", directory: "test/spvasm")

; CHECK: [[MainSubprogram]] = distinct !DISubprogram(name: "my_kernel", linkageName: "my_kernel",
; CHECK-SAME: scope: null, file: [[File]],
; CHECK-SAME: line: 6, type: [[MainSubroutineType:![0-9]+]]
; CHECK-SAME: {{(, isLocal: true, isDefinition: true)?}}, scopeLine: 1
; CHECK-SAME: {{(, isOptimized: false)?}}
; CHECK-SAME: {{(, spFlags: DISPFlagDefinition)?}}
; CHECK-SAME: , unit: [[CompileUnit]]
; CHECK-SAME: {{(, (variables|retainedNodes): ![0-9]+)?}}
; CHECK-SAME: )

; CHECK: [[MainSubroutineType]] = !DISubroutineType(types: [[MainSubroutineParamTypes:![0-9]+]])
; CHECK: [[MainSubroutineParamTypes]] = !{[[A:![0-9]+]], [[B:![0-9]+]], [[C:![0-9]+]]
; CHECK: [[A]] = !DIBasicType(name: "dbg_uint_ty", size: 32, encoding: DW_ATE_unsigned)
; CHECK: [[B]] = !DIBasicType(name: "dbg_float_ty", size: 32, encoding: DW_ATE_float)
; CHECK: [[C]] = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: [[B]], size: 64, align: 8)
