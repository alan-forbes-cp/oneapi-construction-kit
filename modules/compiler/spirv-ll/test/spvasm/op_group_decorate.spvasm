; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
               OpCapability Kernel
               OpMemoryModel Logical OpenCL
               OpEntryPoint Kernel %main "main" %gl_GlobalInvocationID
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %id "id"
               OpName %gl_GlobalInvocationID "gl_GlobalInvocationID"
               OpName %ablock "ablock"
               OpName %bblock "bblock"
               OpName %cblock "cblock"
               OpName %dblock "dblock"
               OpName %inGroup "inGroup"
               OpName %outGroup "outGroup"
               OpName %blockGroup "blockGroup"
               OpName %offsetGroup "offsetGroup"
    %inGroup = OpDecorationGroup 
   %outGroup = OpDecorationGroup
 %blockGroup = OpDecorationGroup
%offsetGroup = OpDecorationGroup
               OpGroupDecorate %inGroup %__0 %__1 %__2 
               OpGroupDecorate %outGroup %_
; Do some redundant decorating like the CTS to make sure duplicates are handled
               OpGroupDecorate %blockGroup %ablock %bblock %cblock
               OpGroupMemberDecorate %offsetGroup %ablock 0 %bblock 0 %cblock 0 %dblock 0
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
       %void = OpTypeVoid
       %uint = OpTypeInt 32 0
     %uint_8 = OpConstant %uint 8
   %arr_uint = OpTypeArray %uint %uint_8
     %ablock = OpTypeStruct %uint
     %bblock = OpTypeStruct %uint
     %cblock = OpTypeStruct %uint
     %dblock = OpTypeStruct %arr_uint
; CHECK: = type { i32 }
; CHECK: = type { i32 }
; CHECK: = type { i32 }
; CHECK: = type { [8 x i32] }
    %v3uint = OpTypeVector %uint 3
 %_ptr_Function_uint = OpTypePointer Function %uint
%_ptr_CrossWorkgroup_int = OpTypePointer CrossWorkgroup %uint
  %_ptr_Input_v3uint = OpTypePointer Input %v3uint
    %_ptr_Input_uint = OpTypePointer Input %uint
%_ptr_CrossWorkgroup_ablock = OpTypePointer CrossWorkgroup %ablock
%_ptr_CrossWorkgroup_bblock = OpTypePointer CrossWorkgroup %bblock
%_ptr_CrossWorkgroup_cblock = OpTypePointer CrossWorkgroup %cblock
%_ptr_CrossWorkgroup_dblock = OpTypePointer CrossWorkgroup %dblock
          %3 = OpTypeFunction %void %_ptr_CrossWorkgroup_ablock %_ptr_CrossWorkgroup_bblock %_ptr_CrossWorkgroup_cblock %_ptr_CrossWorkgroup_dblock
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
     %uint_0 = OpConstant %uint 0
       %main = OpFunction %void None %3
        %__0 = OpFunctionParameter %_ptr_CrossWorkgroup_ablock
        %__1 = OpFunctionParameter %_ptr_CrossWorkgroup_bblock
        %__2 = OpFunctionParameter %_ptr_CrossWorkgroup_cblock
          %_ = OpFunctionParameter %_ptr_CrossWorkgroup_dblock
; CHECK: define spir_kernel void @main(ptr addrspace(1) noundef %0, ptr addrspace(1) noundef %1, ptr addrspace(1) noundef %2, ptr addrspace(1) noundef %3)
          %5 = OpLabel
         %id = OpVariable %_ptr_Function_uint Function
; CHECK:   = alloca i32
         %14 = OpAccessChain %_ptr_Input_uint %gl_GlobalInvocationID %uint_0
         %15 = OpLoad %uint %14
; CHECK:   = call spir_func {{i[0-9]+}} @_Z13get_global_idj(i32 0)
               OpStore %id %15
; CHECK:   store i32 {{[%@].*}}, ptr {{[%@].*}}
         %22 = OpLoad %uint %id
; CHECK:   = load i32, ptr {{[%@].*}}
         %27 = OpAccessChain %_ptr_CrossWorkgroup_int %__0 %uint_0
         %32 = OpAccessChain %_ptr_CrossWorkgroup_int %__1 %uint_0
         %38 = OpAccessChain %_ptr_CrossWorkgroup_int %__2 %uint_0
         %47 = OpAccessChain %_ptr_CrossWorkgroup_int %_ %uint_0 %22
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0, i32 {{[%@].*}}
         %28 = OpLoad %uint %27
         %33 = OpLoad %uint %32
         %39 = OpLoad %uint %38
; CHECK:   = load i32, ptr addrspace(1) {{[%@].*}}
; CHECK:   = load i32, ptr addrspace(1) {{[%@].*}}
; CHECK:   = load i32, ptr addrspace(1) {{[%@].*}}
         %34 = OpIAdd %uint %28 %33
         %40 = OpIAdd %uint %34 %39
; CHECK:   = add i32 {{[%@].*}}, {{[%@].*}}
; CHECK:   = add i32 {{[%@].*}}, {{[%@].*}}
               OpStore %47 %40
; CHECK:   store i32 {{[%@].*}}, ptr addrspace(1) {{[%@].*}}
               OpReturn
; CHECK:   ret void
               OpFunctionEnd
; CHECK: declare spir_func {{i[0-9]+}} @_Z13get_global_idj
