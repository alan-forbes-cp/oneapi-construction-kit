; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Sampled1D %spv_file_s | FileCheck %s
                      OpCapability Kernel
                      OpCapability Addresses
                      OpCapability Sampled1D
                      OpMemoryModel Physical64 OpenCL
                      OpEntryPoint Kernel %image2d "image2d"
                      OpSource OpenCL_C 102000
                      OpName %in_image "in_image"
                      OpName %in_sampler "in_sampler"

; All types, variables and constants
            %void_t = OpTypeVoid
            %uint_t = OpTypeInt 32 0
           %float_t = OpTypeFloat 32         
           %v2int_t = OpTypeVector %uint_t 2
          %v4uint_t = OpTypeVector %uint_t 4
         %v2float_t = OpTypeVector %float_t 2       
         %v4float_t = OpTypeVector %float_t 4
         %sampler_t = OpTypeSampler
      %image2d_t = OpTypeImage %void_t 2D 0 0 0 0 Unknown ReadOnly
      %sampler_fn_t = OpTypeFunction %void_t %sampler_t %image2d_t
   %sampled_image_t = OpTypeSampledImage %image2d_t
             %int_1 = OpConstant %uint_t 1
           %float_1 = OpConstant %float_t 1
           %v2int_1 = OpConstantComposite %v2int_t %int_1 %int_1
         %v2float_1 = OpConstantComposite %v2float_t %float_1 %float_1

; All functions
           %image2d = OpFunction %void_t None %sampler_fn_t
        %in_sampler = OpFunctionParameter %sampler_t
          %in_image = OpFunctionParameter %image2d_t
; CHECK: define spir_kernel void @image2d([[SAMPLER_TY:target\("spirv.Sampler"\)]] noundef %in_sampler,
; CHECK-SAME: [[IMG_TY:target\("spirv.Image", void, 1, 0, 0, 0, 0, 0, 0\)]] noundef %in_image)
                 %1 = OpLabel
     %sampled_image = OpSampledImage %sampled_image_t %in_image %in_sampler
                 %2 = OpImageSampleExplicitLod %v4float_t %sampled_image %v2float_1 None
; CHECK: = call spir_func <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_f([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, <2 x float> {{<(float 1.000000e\+00(, )?)+>|splat \(float 1.000000e\+00\)}})
                 %3 = OpImageSampleExplicitLod %v4float_t %sampled_image %v2int_1 None
; CHECK: = call spir_func <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, <2 x i32> {{<(i32 1(, )?)+>|splat \(i32 1\)}})
                 %6 = OpImageSampleExplicitLod %v4uint_t %sampled_image %v2float_1 None
; CHECK: = call spir_func <4 x i32> @_Z12read_imageui11ocl_image2d11ocl_samplerDv2_f([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, <2 x float> {{<(float 1.000000e\+00(, )?)+>|splat \(float 1.000000e\+00\)}})
                 %7 = OpImageSampleExplicitLod %v4uint_t %sampled_image %v2int_1 None
; CHECK: = call spir_func <4 x i32> @_Z12read_imageui11ocl_image2d11ocl_samplerDv2_i([[IMG_TY]] %in_image, [[SAMPLER_TY]] %in_sampler, <2 x i32> {{<(i32 1(, )?)+>|splat \(i32 1\)}})
                      OpReturn
; CHECK: ret void                         
                      OpFunctionEnd
; CHECK: }
