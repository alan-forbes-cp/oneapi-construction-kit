; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s | FileCheck %s

                OpCapability Kernel
                OpCapability Addresses
                OpCapability Int8
                OpMemoryModel Physical64 OpenCL
                OpEntryPoint Kernel %main "main"
                OpSource OpenCL_C 102000
                OpName %main "main"
                OpName %a "a"
                OpName %b "b"
        %void = OpTypeVoid
      %main_t = OpTypeFunction %void
        %uint = OpTypeInt 32 0
        %char = OpTypeInt 8 0
     %ptr_int = OpTypePointer Function %uint
    %ptr_char = OpTypePointer Function %char
  %const_1024 = OpConstant %uint 1024

        %main = OpFunction %void None %main_t
; CHECK: define spir_kernel void @main()
       %label = OpLabel
           %a = OpVariable %ptr_int Function
; CHECK: [[a:%.*]] = alloca i32
           %b = OpVariable %ptr_char Function
; CHECK: [[b:%.*]] = alloca i8
                OpStore %a %const_1024
; CHECK: store i32 1024, ptr [[a]]
       %a_val = OpLoad %uint %a
; CHECK: [[a_val:%[0-9]+]] = load i32, ptr [[a]]
       %b_val = OpSatConvertUToS %char %a_val
; CHECK: [[b_val:%.*]] = call spir_func signext i8 @_Z16convert_char_satj(i32 [[a_val]])
                OpStore %b %b_val
; CHECK: store i8 [[b_val]], ptr [[b]]
                OpReturn
                OpFunctionEnd
; CHECK: ret void
